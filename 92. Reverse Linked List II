//O(n) time and O(1) space
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        ListNode prevm = null, curm = head;
        for(int i=1;i<m;i++){
            prevm = curm;
            curm = curm.next;
        }
        ListNode nextn = null, curn = head;
        for(int i=1;i<n;i++){
            curn = curn.next;
        }
        nextn = curn.next;
        curn.next = null;
        ListNode[] rev = reverse(curm);
        if(prevm==null) head = rev[0];
        else prevm.next = rev[0];
        rev[1].next = nextn;
        return head;
    }
    
    public ListNode[] reverse(ListNode head){
        if(head==null || head.next==null) return new ListNode[]{head, head};
        ListNode cur = head, prev = null;
        while(cur!=null){
            ListNode next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }
        return new ListNode[]{prev, head};
    }
}
