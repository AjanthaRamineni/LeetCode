//O(n^2) time and O(1) space
class Solution {
    public List<Integer> pancakeSort(int[] A) {
        List<Integer> result = new ArrayList();
        int n = A.length, largest = n;
        for(int i=0;i<n;i++) {
            int largestIndex = findIndex(A, largest);
            flip(A, largestIndex);
            flip(A, largest-1);
            result.add(largestIndex+1);
            result.add(largest);
            largest--;
        }
        return result;
    }
    
    public int findIndex(int[] A, int largest) {
        for(int i=0;i<A.length;i++) {
            if(A[i]==largest) return i;
        }
        return -1;
    }
    
    public void flip(int[] A, int index) {
        int low = 0, high = index;
        while(low<high) {
            int temp = A[low];
            A[low++] = A[high];
            A[high--] = temp;
        }
    }
    
}
