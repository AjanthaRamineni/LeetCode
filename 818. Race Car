//O(2^n) time and O(n) space
class Solution {
    public int racecar(int target) {
        if(target<1) return 0;
        Queue<int[]> queue = new LinkedList();
        queue.offer(new int[]{0,1});
        Set<String> visited = new HashSet<>();
        visited.add(0 + "," + 1);
        int level = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                int[] cell = queue.poll();
                int d = cell[0], s = cell[1];
                if(d==target) return level;
                //Accelerate
                int[] next = new int[]{d+s, s<<1};
                String key = next[0] + "," + next[1];
                if (!visited.contains(key) && next[0]>0 && next[0]<(target<<1)) {
                    queue.offer(next);
                    visited.add(key);
                }
                //Reverse
                next = new int[]{d, s>0?-1:1};
                key = next[0] + "," + next[1];
                if (!visited.contains(key) && next[0]>0 && next[0]<(target<<1)) {
                    queue.offer(next);
                    visited.add(key);
                }
            }
            level++;
        }
        return -1;
    }
}
