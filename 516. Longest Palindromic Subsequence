//O(n2) time and space
class Solution {
    public int longestPalindromeSubseq(String s) {
        if(s==null || s.length()==0) return 0;
        int n = s.length();
        int[][] dp = new int[n][n];
        for(int i=n-1;i>=0;i--){
            dp[i][i] = 1;
            for(int j=i+1;j<n;j++){
                if(s.charAt(i)==s.charAt(j))
                    dp[i][j] = 2 + dp[i+1][j-1];
                else
                    dp[i][j] = Math.max(dp[i][j-1],dp[i+1][j]);
            }
        }
        return dp[0][n-1];
    }
}


//O(2^n) time and O(n) space
class Solution {
    public int longestPalindromeSubseq(String s) {
        //Sanity check 
        if(s==null || s.length()==0) return 0;
        return helper(s,0,s.length()-1);
    } 
    public int helper(String s, int low, int high){
        if(low>high) return 0;
        if(low==high) return 1;
        if(s.charAt(low)==s.charAt(high)){
            return 2 + helper(s, low+1, high-1);
        }
        else{
            return Math.max(helper(s, low+1, high), helper(s, low, high-1));
        }
    }
}
