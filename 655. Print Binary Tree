//O(h*2^h) time and space
class Solution {
    public List<List<String>> printTree(TreeNode root) {
        int height = height(root);
        String[][] result = new String[height][(1<<height)-1];
        for(String[] res:result) {
            Arrays.fill(res, "");
        }
        helper(root, result, 0, 0, (1<<height)-1);
        return list(result);
    }
    
    public void helper(TreeNode root, String[][] result, int r, int c1, int c2) {
        if(root==null) return;
        int cmid = (c1+c2)/2;
        result[r][cmid] = root.val+"";
        helper(root.left, result, r+1, c1, cmid);
        helper(root.right, result, r+1, cmid+1, c2);
    } 
    
    public int height(TreeNode root) {
        if(root==null) return 0;
        return 1 + Math.max(height(root.left), height(root.right));
    }
    
    public List<List<String>> list(String[][] result){
        List<List<String>> list = new ArrayList();
        for(String[] r:result){
            list.add(Arrays.asList(r));
        }
        return list;
    }
    
}
