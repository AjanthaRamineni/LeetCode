//O(E+VlogE) time and O(V+E) space
class Solution {
    Map<Integer, Map<Integer, Integer>> adjlist;
    public int networkDelayTime(int[][] times, int N, int K) {
        construct(times, N);
        return dijkstras(K, N);
    }
    
    public void construct(int[][] times, int N) {
        adjlist = new HashMap();
        for(int i=1;i<=N;i++) {
            adjlist.put(i, new HashMap());
        }
        for(int[] time:times) {
            int u = time[0], v = time[1], w = time[2];
            adjlist.get(u).put(v,w);
        }
    }
    
    public int dijkstras(int source, int N) {
        Map<Integer, Integer> map = new HashMap();
        PriorityQueue<int[]> pq = new PriorityQueue(1, new Comparator<int[]>(){
            public int compare(int[] a,int[] b) {
                return a[1]-b[1];
            }
        });
        pq.offer(new int[]{source, 0});
        while(!pq.isEmpty()) {
            int[] cell = pq.poll();
            int u = cell[0], t = cell[1];
            if(map.containsKey(u)) continue;
            map.put(u, t);
            if(adjlist.get(u)==null) continue;
            for(int v:adjlist.get(u).keySet()) {
                pq.offer(new int[]{v, t+adjlist.get(u).get(v)});
            }
        }
        int max = Integer.MIN_VALUE;
        if(map.size()!=N) return -1;
        for(Integer key:map.keySet()) {
            max = Math.max(max, map.get(key));
        }
        return max;
    }
    
}

//O(VE) time and O(V+E) space
class Solution {
    public int networkDelayTime(int[][] edges, int N, int K) {
        double[] minDistance = new double[N];
        Arrays.fill(minDistance, Double.MAX_VALUE);
        minDistance[K-1] = 0.0;
        for(int i=1;i<N;i++) {
            for(int[] edge:edges) {
                int u = edge[0]-1, v = edge[1]-1, w = edge[2];
                minDistance[v] = Math.min(minDistance[v], minDistance[u]+w);
            }
        }
        double res = Double.MIN_VALUE;
        for(double d:minDistance) {
            res = Math.max(res, d);
        }
        return (res==Double.MAX_VALUE)?-1:(int)res;
    }
}

