//O(n) time and space
class Solution {
    public int longestValidParentheses(String s) {
        if(s==null || s.length()==0) return 0;
        Stack<Integer> stack = new Stack();
        stack.push(-1);
        int n = s.length();
        int max = 0;
        for(int i=0;i<n;i++){
            char c = s.charAt(i);
            if(c=='('){
                stack.push(i);
            }
            else if(c==')'){
                stack.pop();
                if(!stack.isEmpty()){
                    max = Math.max(max, i-stack.peek());
                }
                else{
                    stack.push(i);
                }
            }
        }
        return max;
    }
}
