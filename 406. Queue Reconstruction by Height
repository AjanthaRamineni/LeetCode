//O(nlogn) time and O(n) space
class Solution {
    public int[][] reconstructQueue(int[][] people) {
        //Sanity check
        if(people==null || people.length==0) return new int[0][0];
        //Sort all the people in increasing order of their positions if there is a tie in the heights
        //Else sort all of the ties in decreasing order of their heights
        Arrays.sort(people, new Comparator<int[]>(){
           public int compare(int[] a, int[] b){
               if(a[0]!=b[0])
                   return b[0]-a[0];
               else 
                   return a[1]-b[1];
           } 
        });
        List<int[]> list = new ArrayList();
        for(int[] p:people){
            list.add(p[1],p);
        }
        return array(list);
    }
    
    public int[][] array(List<int[]> list){
        int m = list.size(), n = list.get(0).length;
        int[][] result = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                result[i][j] = list.get(i)[j];
            }
        }
        return result;
    }
    
}
