public class Codec {

    //O(n) time and space
    public String serialize(TreeNode root) {
        if(root==null) return "";
        Queue<TreeNode> queue = new LinkedList();
        queue.offer(root);
        String result = "";
        while(!queue.isEmpty()){
            int level = queue.size();
            for(int i=0;i<level;i++){
                TreeNode node = queue.poll();
                if(node==null){
                    result = result + "null,";
                    continue;
                }
                result = result + node.val + ",";
                queue.offer(node.left);
                queue.offer(node.right);
            }
        }
        return result;
    }

    //O(n) time and space
    public TreeNode deserialize(String data) {
        if(data=="" || data.length()==0) return null;
        String[] leaves = data.split(",");
        TreeNode root = new TreeNode(Integer.parseInt(leaves[0]));
        Queue<TreeNode> queue = new LinkedList();
        queue.offer(root);
        for(int i=1;i<leaves.length;i++){
            TreeNode parent = queue.poll();
            if(!leaves[i].equals("null")){
                TreeNode left = new TreeNode(Integer.parseInt(leaves[i]));
                parent.left = left;
                queue.offer(left);
            }
            if(!leaves[++i].equals("null")){
                TreeNode right = new TreeNode(Integer.parseInt(leaves[i]));
                parent.right = right;
                queue.offer(right);
            }
        }
        return root;
    }
}
