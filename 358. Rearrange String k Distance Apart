//O(nlog26) = O(n) time and O(n) space
class Solution {
    public String rearrangeString(String s, int k) {
        //Sanity check
        if(s==null || s.length()==0) return "";
        int n = s.length();
        StringBuffer sb = new StringBuffer();
        Map<Character, Integer> map = new HashMap();
        for(char c:s.toCharArray()) map.put(c, map.getOrDefault(c,0)+1);
        //Declaration of max heap with values
        Queue<Map.Entry<Character, Integer>> pq = new PriorityQueue(new Comparator<Map.Entry<Character, Integer>>(){
            public int compare(Map.Entry<Character, Integer> m1, Map.Entry<Character, Integer> m2){
                return m2.getValue()-m1.getValue();
            }
        });
        Queue<Map.Entry<Character, Integer>> q = new LinkedList();
        pq.addAll(map.entrySet());
        while(!pq.isEmpty()){
            Map.Entry<Character, Integer> entry = pq.poll();
            sb.append(entry.getKey());
            map.put(entry.getKey(), map.get(entry.getKey())-1);
            q.offer(entry);
            if(q.size()<k) continue;
            Map.Entry<Character, Integer> qentry = q.poll();
            if(qentry.getValue()>0) pq.offer(qentry);
        }
        return (sb.length()==n)?sb.toString():"";
    }
}
