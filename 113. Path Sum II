//O(nlogn) time and space
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<String> list = new ArrayList();
        List<List<Integer>> result = new ArrayList();
        backtrack(list, "", root);
        for(String s:list){
            String[] tokens = s.split(",");
            List<Integer> sublist = new ArrayList();
            int cur = 0;
            for(String token:tokens){
                cur+=Integer.parseInt(token);
                sublist.add(Integer.parseInt(token));
            }
            if(cur==sum) result.add(new ArrayList(sublist));
        }
        return result;
    }
    
    public void backtrack(List<String> list, String s, TreeNode root) {
        if(root==null) return;
        if(root.left==null && root.right==null){
            s+=root.val;
            list.add(s);
            return;
        }
        s+=root.val+",";
        backtrack(list, s, root.left);
        backtrack(list, s, root.right);
    }
    
}
