/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/

//O(n) time and space
//where n is the number of employees
class Solution {
    
    public int getImportance(List<Employee> employees, int id) {
        int sum = 0;
        if(employees==null || employees.size()==0) return sum;
        Map<Integer, Integer> map = new HashMap(); //Mapping between id's and rating values
        Map<Integer, List<Integer>> adjlist = new HashMap(); //Mapping between employee and his subordinates
        for(Employee employee:employees){
            map.put(employee.id, employee.importance);
            if(adjlist.get(employee.id)==null) adjlist.put(employee.id, new ArrayList());
            if(employee.subordinates==null) continue;
            for(int subordinate:employee.subordinates){
                adjlist.get(employee.id).add(subordinate);
            }
        }
        return dfs(map, adjlist, id);
    }
    
    public int dfs(Map<Integer, Integer> map, Map<Integer, List<Integer>> adjlist, int id){
        int sum = 0;
        Stack<Integer> stack = new Stack();
        stack.push(id);
        Set<Integer> set = new HashSet();
        while(!stack.isEmpty()){
            int temp = stack.pop();
            System.out.println(map.get(temp));
            sum+=map.get(temp);
            set.add(temp);
            if(adjlist.get(temp)==null) continue;
            for(Integer n:adjlist.get(temp)){
                if(set.contains(n)) continue;
                set.add(n);
                stack.push(n);
            } 
        }
        return sum;
    }
}
