//O(n) time and space
class Solution {
    
    class DisjointSet {
        int[] parent;
        int[] rank;
        int size;
        public DisjointSet(int n) {
            parent = new int[n];
            rank = new int[n];
            for(int i=0;i<n;i++) {
                rank[i] = 1;
                parent[i] = i;
            }
            size = n;
        }
        
        //O(1) amortized
        public void union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA==parentB) return;
            if(rank[parentA]>rank[parentB]) {
                parent[parentB] = parentA;
                rank[parentA]+=rank[parentB];
            }
            else {
                parent[parentA] = parentB;
                rank[parentB]+=rank[parentA];
            }
            size--;
        }
        
        //O(1) amortized
        public int find(int a) {
            if(a==parent[a]) return a;
            parent[a] = find(parent[a]);
            return parent[a];
        }
        
    }

    public boolean equationsPossible(String[] equations) {
        DisjointSet ds = new DisjointSet(26);
        for(String equation:equations) {
            if(equation.charAt(1)=='=') {
                ds.union(equation.charAt(0)-'a', equation.charAt(3)-'a');
            }
        }
        for(String equation:equations) {
            if(equation.charAt(1)=='!') {
                if(ds.find(equation.charAt(0)-'a')== ds.find(equation.charAt(3)-'a'))
                    return false;
            }
        }
        return true;
    }
}
