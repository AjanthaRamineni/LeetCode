//O(v^2) time and O(v+e) space
class Solution {
    Map<Integer, List<Integer>> adjlist;
    Set<Integer> set;
    public int findCircleNum(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
  initialise(grid);
  int count = 0;
  for(int i=0;i<grid.length;i++){
    if(!set.contains(i)){
      dfs(i);
      count++;
    }
  }
  return count;
}

//O(V+E) time and space
public void initialise(int[][] grid){
  adjlist = new HashMap();
  set = new HashSet();
  for(int i=0;i<grid.length;i++){
    if(adjlist.get(i)==null) adjlist.put(i, new ArrayList());
    for(int j=0;j<grid[0].length;j++){
      if(adjlist.get(j)==null) adjlist.put(j, new ArrayList());
      if(grid[i][j]==1){
        adjlist.get(i).add(j);
        adjlist.get(j).add(i);
      }
    }
  }
}

    public void dfs(int source){
          Stack<Integer> stack = new Stack();
  stack.push(source);
  set.add(source);
  while(!stack.isEmpty()){
    int temp = stack.pop();
    for(Integer neighbor:adjlist.get(temp)){
      if(!set.add(neighbor)) continue;
      stack.push(neighbor);
    }
  }
}
}



class Solution {
    
    //No Path Compression and Ranking
    class DisjointSet {
        int[] parent;
        int size;
        public DisjointSet(int n) {
            parent = new int[n];
            for(int i=0;i<n;i++) {
                parent[i] = i;
            }
            size = n;
        }
        
        //O(n)
        public void union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA!=parentB) {
                parent[parentA] = parentB;
                size--;
            }
        }
        
        //O(n)
        public int find(int a) {
            if(a==parent[a]) return a;
            return find(parent[a]);
        }
        
    }
    
    public int findCircleNum(int[][] M) {
        if(M==null || M.length==0) return 0;
        int m = M.length, n = M[0].length;
        DisjointSet ds = new DisjointSet(m);
        for(int i=0;i<m;i++) {
            for(int j=i+1;j<n;j++) {
                if(M[i][j]==1) {
                    ds.union(i,j);
                }
            }
        }
        return ds.size;
    }
}

class Solution {
    
    //With path Compression
    class DisjointSet {
        int[] parent;
        int size;
        public DisjointSet(int n) {
            parent = new int[n];
            for(int i=0;i<n;i++) {
                parent[i] = i;
            }
            size = n;
        }
        
        //O(logn)
        public void union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA!=parentB) {
                parent[parentA] = parentB;
                size--;
            }
        }
        
        //O(logn)
        public int find(int a) {
            if(a==parent[a]) return a;
            parent[a] = find(parent[a]);
            return parent[a];
        }
        
    }
    
    public int findCircleNum(int[][] M) {
        if(M==null || M.length==0) return 0;
        int m = M.length, n = M[0].length;
        DisjointSet ds = new DisjointSet(m);
        for(int i=0;i<m;i++) {
            for(int j=i+1;j<n;j++) {
                if(M[i][j]==1) {
                    ds.union(i,j);
                }
            }
        }
        return ds.size;
    }
}

class Solution {
    
    class DisjointSet {
        int[] parent;
        int[] rank;
        int size;
        public DisjointSet(int n) {
            parent = new int[n];
            rank = new int[n];
            for(int i=0;i<n;i++) {
                rank[i] = 1;
                parent[i] = i;
            }
            size = n;
        }
        
        //O(1) amortized
        public void union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA==parentB) return;
            if(rank[parentA]>rank[parentB]) {
                parent[parentB] = parentA;
                rank[parentA]+=rank[parentB];
            }
            else {
                parent[parentA] = parentB;
                rank[parentB]+=rank[parentA];
            }
            size--;
        }
        
        //O(1) amortized
        public int find(int a) {
            if(a==parent[a]) return a;
            parent[a] = find(parent[a]);
            return parent[a];
        }
        
    }
    
    public int findCircleNum(int[][] M) {
        if(M==null || M.length==0) return 0;
        int m = M.length, n = M[0].length;
        DisjointSet ds = new DisjointSet(m);
        for(int i=0;i<m;i++) {
            for(int j=i+1;j<n;j++) {
                if(M[i][j]==1) {
                    ds.union(i,j);
                }
            }
        }
        return ds.size;
    }
}
