class Solution {
    Map<Integer, List<Integer>> adjlist;
    Set<Integer> set;
    public int findCircleNum(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
  initialise(grid);
  int count = 0;
  for(int i=0;i<grid.length;i++){
    if(!set.contains(i)){
      dfs(i);
      count++;
    }
  }
  return count;
}

//O(V+E) time and space
public void initialise(int[][] grid){
  adjlist = new HashMap();
  set = new HashSet();
  for(int i=0;i<grid.length;i++){
    if(adjlist.get(i)==null) adjlist.put(i, new ArrayList());
    for(int j=0;j<grid[0].length;j++){
      if(adjlist.get(j)==null) adjlist.put(j, new ArrayList());
      if(grid[i][j]==1){
        adjlist.get(i).add(j);
        adjlist.get(j).add(i);
      }
    }
  }
}

public void dfs(int source){
          Stack<Integer> stack = new Stack();
  stack.push(source);
  set.add(source);
  while(!stack.isEmpty()){
    int temp = stack.pop();
    for(Integer neighbor:adjlist.get(temp)){
      if(!set.add(neighbor)) continue;
      stack.push(neighbor);
    }
  }
}
}
