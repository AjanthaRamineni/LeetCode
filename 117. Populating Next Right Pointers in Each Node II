/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val,Node _left,Node _right,Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
//O(n) time and space
class Solution {
    public Node connect(Node root) {
        if(root==null) return root;
        Queue<Node> q = new LinkedList();
        q.offer(root);
        while(!q.isEmpty()){
            int level = q.size();
            Node prev = null;
            for(int i=0;i<level;i++){
                Node temp = q.poll();
                if(prev!=null) prev.next = temp;
                if(temp.left!=null) q.offer(temp.left);
                if(temp.right!=null) q.offer(temp.right);
                prev = temp;
            }
        }
        return root;
    }
}
