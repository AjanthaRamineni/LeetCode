//O(mn) time and O(n) space
class Solution {
    public int maximalRectangle(char[][] matrix) {
        //Sanity check
        if(matrix==null || matrix.length==0) return 0;
        int m = matrix.length, n = matrix[0].length;
        int[] array = new int[n];
        int max = 0;
        for(int i=0;i<m;i++){
            initialise(matrix,array,i,m,n);
            max = Math.max(max, largestRectangleArea(array));
        }
        return max;
    }
    
    //O(n) time and space
    public void initialise(char[][] matrix, int[] array, int i, int m, int n){
        for(int j=0;j<n;j++){
            if(matrix[i][j]=='1'){
                array[j]++;
            }
            else{
                array[j] = 0;
            }
        }
    }
    
    //O(n) time and space
    public int largestRectangleArea(int[] heights) {
        //Sanity check
        if(heights==null || heights.length==0) return 0;
        int n = heights.length;
        Stack<Integer> stack = new Stack();
        int maxArea = 0;
        for(int i=0;i<=n;i++){
            int h = (i==n)?0:heights[i];
            if(stack.isEmpty() || h>=heights[stack.peek()]){
                stack.push(i);
            }
            else{
                int tp = stack.pop();
                maxArea = Math.max(maxArea, heights[tp]*(stack.isEmpty()?i:i-1-stack.peek()));
                i--;
            }
        }
        return maxArea;
    }
}
