class Solution {
    //O(nk) time and O(k) space
    PriorityQueue<Long> minpq;
    PriorityQueue<Long> maxpq;
    public double[] medianSlidingWindow(int[] nums, int k) {
        if(nums==null || nums.length==0 || k<1) return new double[0];
        int n = nums.length;
        minpq = new PriorityQueue();
        maxpq = new PriorityQueue<Long>(1, new Comparator<Long>(){
            public int compare(Long a, Long b) {
                return b.compareTo(a);
            }
        });
        double[] result = new double[n-k+1];
        for(int i=0;i<n;i++) {
            add(Long.valueOf(nums[i]));
            if(i>=k-1) {
                result[i-k+1] = median();
                remove(Long.valueOf(nums[i-k+1]));
            }
        }
        return result;
    }
    
    public void add(Long num) {
        maxpq.offer(num);
        minpq.offer(maxpq.poll());
        if(minpq.size()-1>maxpq.size()) {
            maxpq.offer(minpq.poll());
        }
    }
    
    public void remove(Long num) {
        double m = median();
        if(num>=m) {
            minpq.remove(num);
        }
        else {
            maxpq.remove(num);
        }
        if(minpq.size()-1>maxpq.size()) {
            maxpq.offer(minpq.poll());
        }
    }
    
    public double median() {
        if(minpq.size()==maxpq.size()) {
            return (minpq.peek() + maxpq.peek())/2.0;
        }
        else {
            return minpq.peek();
        }
    }
    
}
