//O(mn*(mn)!) time and space
class Solution {
    public int slidingPuzzle(int[][] board) {
        String target = "123450";
        int[][] map = new int[][]{{1,3},{0,2,4},{1,5},{0,4},{1,3,5},{2,4}};
        String source = "";
        for(int[] b:board) {
            for(int a:b) source+=a;
        }
        if(source.equals(target)) return 0;
        int level = 0;
        Queue<String> queue = new LinkedList();
        Set<String> set = new HashSet();
        queue.offer(source);
        set.add(source);
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                String key = queue.poll();
                char[] ch = key.toCharArray();
                int index = key.indexOf('0');
                for(int m:map[index]) {
                    swap(ch,index,m);
                    String newKey = String.valueOf(ch);
                    if(!set.contains(newKey)) {
                        set.add(newKey);
                        queue.offer(newKey);
                        if(newKey.equals(target)) return level+1;
                    }
                    swap(ch,index,m);
                }
            }
            level++;
        }
        return -1;
    }
    
    public void swap(char[] ch, int i, int j) {
        char temp = ch[i];
        ch[i] = ch[j];
        ch[j] = temp;
    }
}
