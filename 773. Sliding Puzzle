//Needs to update: O(3^6) time and space
class Solution {
    
    public int slidingPuzzle(int[][] board) {
        String target = "123450";
        String start = "";
        for(int i=0;i<2;i++) {
            for(int j=0;j<3;j++) {
                start+=board[i][j];
            }
        }
        if(start.equals(target)) return 0;
        Queue<String> queue = new LinkedList();
        Set<String> set = new HashSet();
        int[][] dirs = new int[][]{{1,3},{0,2,4},{1,5},{0,4},{3,5,1},{2,4}};
        queue.offer(start);
        int level = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                String cur = queue.poll();
                int index = cur.indexOf('0');
                for(int dir:dirs[index]) {
                    String next = swap(cur, index, dir);
                    if(!set.contains(next)) {
                        if(next.equals(target)) return level+1;
                        set.add(next);
                        queue.offer(next);
                    } 
                }
            }
            level++;
        }
        return -1;
    }
    
    private String swap(String str, int i, int j) {
        StringBuilder sb = new StringBuilder(str);
        sb.setCharAt(i, str.charAt(j));
        sb.setCharAt(j, str.charAt(i));
        return sb.toString();
    }
}
