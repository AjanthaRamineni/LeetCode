//O(n2) time and O(n2) space
class Solution {
    public int maxPoints(Point[] points) {
        if(points==null || points.length==0) return 0;
        if(points.length<=2) return points.length;
        Map<Integer,Map<Integer,Integer>> map = new HashMap();
        int result = 0;
        for(int i=0;i<points.length;i++){
            map.clear();
            int overlap = 0, line = 0;
            for(int j=i+1;j<points.length;j++){
                int x = points[i].x - points[j].x;
                int y = points[i].y - points[j].y;
                if(x==0 && y==0){
                    overlap++;
                    continue;
                }
                int gcd = gcd(x,y);
                if(gcd!=0){
                    x/=gcd;
                    y/=gcd;
                }
                if(map.containsKey(x)){
                    if(map.get(x).containsKey(y)){
                        map.get(x).put(y, map.get(x).get(y)+1);
                    }
                    else{
                        map.get(x).put(y,1);
                    }
                }
                else{
                    Map<Integer, Integer> m = new HashMap();
                    m.put(y,1);
                    map.put(x,m);
                }
                 line = Math.max(line,map.get(x).get(y));
            }
            result = Math.max(result, line+overlap+1);
        }
        return result;
    }
    
    public int gcd(int a, int b){
        if(b==0) return a;
        else return gcd(b,a%b);
    }
    
}
