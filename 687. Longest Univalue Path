//O(n) time and space
class Solution {
    int max = 0;
    public int longestUnivaluePath(TreeNode root) {
        if(root==null) return max;
        postOrder(root);
        return max-1;
    }
    
    public int postOrder(TreeNode root) {
        if(root==null) return 0;
        int left = postOrder(root.left);
        int right = postOrder(root.right);
        if(root.left!=null && root.left.val!=root.val) {
            left = 0;
        }
        if(root.right!=null && root.right.val!=root.val) {
            right = 0;
        }
        max = Math.max(max, 1+left+right);
        return 1 + Math.max(left, right);
    }
    
}
