//O(n) and O(1) 
class Solution {
    public int integerReplacement(int n) {
        int count = 0;
        while(n!=1){
            if((n&1)==0){
                n>>>=1;
            } 
            else if(n==3 || Integer.bitCount(n-1)<Integer.bitCount(n+1)){
                n--;
            }
            else{
                n++;
            }
            count++;
        }
        return count;
    }
}

//O(n) time and space
class Solution {
    public int integerReplacement(int n) {
        if(n<2) return 0;
        int[] dp = new int[n+1];
        for(int i=2;i<=n;i++){
            if(i%2==0){
                dp[i] = 1 + dp[i/2];
            }
            else{
                dp[i] = Math.min(1+dp[i-1],2+dp[i/2 + 1]);
            }
            
        }
        return dp[n];
    }
    public int recursive(int n){
        if(n<2) return 0;
        if(n%2==0) return 1+recursive(n/2);
        else return 1+Math.min(recursive(n-1),recursive(n+1));
    }
}
