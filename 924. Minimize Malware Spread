class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Set<Integer> set = new HashSet();
        for(int i:initial){
            set.add(i);
        }
        int n = graph.length;
        int min = Integer.MAX_VALUE, ans = 0;
        for(int i=0;i<initial.length;i++){
            set.remove(initial[i]);
            int b = bfs(graph, set);
            if(b<min || ((b==min)&&(initial[i]<ans))){
                ans = initial[i];
                min = b;
            }
            set.add(initial[i]);
        }
        return ans;
    }
    
    public int bfs(int[][] graph, Set<Integer> set){
        Queue<Integer> queue = new LinkedList();
        Set<Integer> result = new HashSet(set);
        for(Integer s:set){
            queue.offer(s);
        }
        while(!queue.isEmpty()){
            int level = queue.size();
            for(int i=0;i<level;i++){
                int temp = queue.poll();
                for(int j=0;j<graph[temp].length;j++){
                    if((graph[temp][j]==1)&&(!result.contains(j))){
                        result.add(j);
                        queue.offer(j);
                    }
                }
            }
        }
        return result.size();
    }
    
}


class Solution {
    
    //O(n^2) time and O(n^2) space
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        DisjointSet ds = new DisjointSet(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if(graph[i][j]==1) ds.union(i, j);
            }
        }
        int[] malwareCount = new int[n];
        for(int node:initial) {
            malwareCount[ds.find(node)]++;
        }
        int maxNode = -1, maxSize = -1;
        for(int node:initial) {
            int parent = ds.find(node);
            if (malwareCount[parent] == 1) {
                int parentSize = ds.size[parent];
                if (parentSize > maxSize || (parentSize == maxSize && node < maxNode)) {
                    maxSize = parentSize;
                    maxNode = node;
                }
            }
        }
        if (maxNode == -1) {
            maxNode = Integer.MAX_VALUE;
            for (int node: initial)
                maxNode = Math.min(maxNode, node);
        }
        return maxNode;
    }
    
    class DisjointSet {
        int[] parent, size;
        public DisjointSet(int n) {
            parent = new int[n];
            size = new int[n];
            for(int i=0;i<n;i++) {
                parent[i] = i;
            }
            Arrays.fill(size, 1);
        }
        
        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if(rootX!=rootY) {
                parent[rootX] = rootY;
                size[rootY]+=size[rootX];
            }
        }
        
        public int find(int x) {
            if(x==parent[x]) return x;
            parent[x] = find(parent[x]);
            return parent[x];
        }
        
    }
}
