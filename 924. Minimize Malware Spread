class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Set<Integer> set = new HashSet();
        for(int i:initial){
            set.add(i);
        }
        int n = graph.length;
        int min = Integer.MAX_VALUE, ans = 0;
        for(int i=0;i<initial.length;i++){
            set.remove(initial[i]);
            int b = bfs(graph, set);
            if(b<min || ((b==min)&&(initial[i]<ans))){
                ans = initial[i];
                min = b;
            }
            set.add(initial[i]);
        }
        return ans;
    }
    
    public int bfs(int[][] graph, Set<Integer> set){
        Queue<Integer> queue = new LinkedList();
        Set<Integer> result = new HashSet(set);
        for(Integer s:set){
            queue.offer(s);
        }
        while(!queue.isEmpty()){
            int level = queue.size();
            for(int i=0;i<level;i++){
                int temp = queue.poll();
                for(int j=0;j<graph[temp].length;j++){
                    if((graph[temp][j]==1)&&(!result.contains(j))){
                        result.add(j);
                        queue.offer(j);
                    }
                }
            }
        }
        return result.size();
    }
    
}
