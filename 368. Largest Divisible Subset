//O(n2) and O(n)
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer> list = new ArrayList();
        //Sanity check
        if(nums==null || nums.length==0) return list;
        Arrays.sort(nums);
        int n = nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp,1);
        dp[0] = 1;
        for(int i=1;i<n;i++){
            for(int j=i-1;j>=0;j--){
                if(nums[i]%nums[j]==0)
                    dp[i] = Math.max(dp[i],1+dp[j]);
            }
        }
        int max = 0;
        for(int i=1;i<dp.length;i++){
             if(dp[max]<dp[i]) max = i;  
        }
        int temp = nums[max];
        int curdp = dp[max];
        for(int i=max;i>=0;i--){
            if(temp%nums[i]==0 && dp[i]==curdp){
                list.add(nums[i]);
                temp = nums[i];
                curdp--;
            }
        }
        return list;
    }
}
