//O(n^2) time and space
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer> list = new ArrayList();
        if(nums==null || nums.length==0) return list;
        int n = nums.length;
        Arrays.sort(nums);
        int[] dp = new int[n];
        int[] backtrack = new int[n];
        int max = 0, index = 0;
        for(int i=0;i<n;i++){
            dp[i] = 1;
            backtrack[i] = i;
            for(int j=0;j<i;j++){
                if((nums[i]%nums[j])==0){
                    if(dp[i]<(1+dp[j])){
                        dp[i] = 1+dp[j];
                        backtrack[i] = j;
                    }
                }
            }
            if(max<dp[i]){
                max = dp[i];
                index = i;
            }
        }
        while(list.size()<max){
            int cur = nums[index];
            list.add(cur);
            index = backtrack[index];
        }
        return list;
    }
}
