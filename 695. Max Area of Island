//O(4pown) time and O(1) space(Excluding recursive stack)
class Solution {
    int[][] dirs = new int[][]{{-1,0},{1,0},{0,1},{0,-1}};
    public int maxAreaOfIsland(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m = grid.length;
        int n = grid[0].length;
        int max = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1)
                    max = Math.max(max, helper(grid,i,j,0));
            }
        }
        return max;
    }
    
    public int helper(int[][] grid, int i, int j, int area){
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || grid[i][j]==0) return area;
        grid[i][j] = 0;
        area++;
        for(int[] dir:dirs){
            int x = i+dir[0];
            int y = j+dir[1];
            area=helper(grid,x,y,area);
        }
        return area;
    }
}
