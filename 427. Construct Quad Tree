/*
// Definition for a QuadTree node.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;

    public Node() {}

    public Node(boolean _val,boolean _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/
class Solution {
    public Node construct(int[][] grid) {
        return helper(0,0,grid.length-1,grid[0].length-1,grid);
    }
    public Node helper(int r1, int c1, int r2, int c2, int[][] grid){
        if(r1>r2 || c1>c2) return null;
        int count1 = 0; 
        for(int i=r1;i<=r2;i++){
            for(int j=c1;j<=c2;j++){
                if(grid[i][j]==1){
                    count1++;
                }
            }
        }
        if(count1==((c2-c1+1)*(r2-r1+1))){
            return new Node(true, true, null, null, null, null);
        }
        if(count1==0){
            return new Node(false, true, null, null, null, null);
        }
        return new Node(false, false, 
               helper(r1, c1, (r2+r1)/2, (c2+c1)/2, grid),
               helper(r1, (c2+c1)/2 +1, (r2+r1)/2, c2, grid),
               helper((r2+r1)/2 +1, c1, r2, (c2+c1)/2, grid),
               helper((r2+r1)/2 +1, (c2+c1)/2 +1, r2, c2, grid)
               );
    }
}
