class Solution {
    int res;
    public int findMinStep(String board, String hand) {
        res = Integer.MAX_VALUE;
        int[] map = new int[26];
        for(int i = 0;i < hand.length();i++){
            char ch = hand.charAt(i);
            map[ch - 'A']++;
        }
        DFS(board, map, 0);
        if(res == Integer.MAX_VALUE) return -1;
        return res;
    }
    public void DFS(String board, int[] map, int curCount){
        if(board == null || board.length() == 0){
            res = Math.min(res, curCount);
            return;
        }
        if(curCount >= res) return;
        for(int i = 0;i < board.length();i++){
            int j = i;
            while(j < board.length() && board.charAt(j) == board.charAt(i)) j++;
            int need = 3 - (j - i);
            if(need <= map[board.charAt(i) - 'A']){
                map[board.charAt(i) - 'A'] -= need;
                String newBoard = board.substring(0, i) + board.substring(j);
                newBoard = clean(newBoard);
                DFS(newBoard, map, curCount + need);
                map[board.charAt(i) - 'A'] += need;
            }
            i = j - 1;
        }
        return;
    }

    // Update the board by removing all consecutive 3+ balls.
    // "YWWRRRWWYY" -> "YWWWWYY" -> "YYY" -> ""
    public String clean(String s){
        for(int i = 0;i < s.length();i++){
            int j = i;
            while(j < s.length() && s.charAt(j) == s.charAt(i)) j++;
            if((j - i) % 3 == 0 || (i == 0 && j == s.length() && j - i >= 3)){
                String t = s.substring(0, i) + s.substring(j);
                i = 0; // notice
                s = t;
            }
        }
        return s;
    }
}
