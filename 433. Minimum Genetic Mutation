//O(n*4^k) time and O(n) space
class Solution {
    public int minMutation(String beginWord, String endWord, String[] bank) {
        if(beginWord.equals(endWord)) return 0;
        int level = 1;
        Set<String> set = new HashSet();
        for(String b:bank) set.add(b);
        set.remove(beginWord);
        char[] charset = new char[]{'A','C','G','T'};
        Queue<String> q = new LinkedList();
        q.offer(beginWord);
        while(!q.isEmpty()){
            int size = q.size();
            for(int j=0;j<size;j++){
                String word = q.poll();
                char[] ch = word.toCharArray();
                for(int i=0;i<ch.length;i++){
                    char original = ch[i];
                    for(char c:charset){
                        ch[i] = c;
                        String key = String.valueOf(ch);
                        if(set.contains(key)){
                            if(endWord.equals(key)) return level;
                            set.remove(key);
                            q.offer(key);
                        }
                    }
                    ch[i] = original;
                }
            }
            level++;
        }
        return -1;
    }
}
