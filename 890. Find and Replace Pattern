//O(n^2) time and O(n) space
class Solution {
    public List<String> findAndReplacePattern(String[] words, String pattern) {
        List<String> result = new ArrayList();
        for(String word:words) {
            if(isIsomorphic(word, pattern)) result.add(word);
        }
        return result;
    }
    
    //O(n) time and O(1) space
    public boolean isIsomorphic(String s, String t) {
        //Sanity checks
        if(s==null && t==null) return true;
        if(s==null || t==null) return false;
        if(s.length()!=t.length()) return false;
        Map<Character, Character> map = new HashMap();
        for(int i=0;i<s.length();i++){
            char a = s.charAt(i);
            char b = t.charAt(i);
            if(map.containsKey(a)){
                if(map.get(a)!=b) return false;
            }
            else if(map.containsValue(b)) return false;
            else map.put(a,b);
        }
        return true;
    }
    
}
