class Codec {

    //O(n) time and space
    public String serialize(Node root) {
        if(root==null) return "";
        List<String> list = new ArrayList();
        preorder(root, list);
        String result = "";
        for(String s:list) result+=s;
        return result;
    }
    
    public void preorder(Node node, List<String> list){
        if(node==null) return;
        list.add(node.val+",");
        list.add(node.children.size()+",");
        for(Node child:node.children){
            preorder(child, list);
        }
    }

    //O(n) time and space
    public Node deserialize(String data) {
        if(data==null || data.length()==0) return null;
        String[] tokens = data.split(",");
        Queue<String> queue = new LinkedList(Arrays.asList(tokens));
        return preorder(queue);
    }
    
    public Node preorder(Queue<String> queue){
        Node root = new Node();
        root.val = Integer.parseInt(queue.poll());
        int size = Integer.parseInt(queue.poll());
        root.children = new ArrayList(size);
        for(int i=0;i<size;i++){
            root.children.add(preorder(queue));
        }
        return root;
    }
    
}
