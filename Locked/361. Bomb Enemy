class Solution {
    public int maxKilledEnemies(char[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int max = 0;
        int m = grid.length;
        int n = grid[0].length;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int sum = 0;
                if(grid[i][j]=='0'){
                    sum+=recursive(i+1, j, m, n, grid, 'R');
                    sum+=recursive(i-1, j, m, n, grid, 'L');
                    sum+=recursive(i, j+1, m, n, grid, 'U');
                    sum+=recursive(i, j-1, m, n, grid, 'D');
                }
                max = Math.max(max, sum);
            }
        }
        return max;
    }
    
    public int recursive(int i, int j, int m, int n, char[][] grid, char direction){
        if(i<0 || j<0 || i>=m || j>=n || grid[i][j]=='W') return 0;
        int sum = (grid[i][j]=='E')?1:0;  
        switch(direction){
            case 'R':
                sum+=recursive(i+1, j, m, n, grid, 'R');
                break;
            case 'L':
                sum+=recursive(i-1, j, m, n, grid, 'L');
                break;
            case 'U':
                sum+=recursive(i, j+1, m, n, grid, 'U');
                break;
            case 'D':
                sum+=recursive(i, j-1, m, n, grid, 'D');
                break;
        }
        return sum;
    }
    
}
