//O(n) time and space
class Solution {
    public int calculate(String s) {
        //Sanity Check
        if((s==null) || (s.length()==0)) return 0;
        int n = s.length();
        int num = 0;
        Stack<Integer> numStack = new Stack();
        Stack<Character> opStack = new Stack();
        for(int i=0;i<n;i++){
            char c = s.charAt(i);
            if(c==' ') continue;
            else if(Character.isDigit(c)){
                num = c-'0';
                while(((i+1)<s.length()) &&(Character.isDigit(s.charAt(i+1)))){
                    num = num*10 + s.charAt(i+1)-'0';
                    i++;
                }
                numStack.push(num);
                num = 0;
            }
            else if(c=='('){
                opStack.push(c);
            }
            else if(c==')'){
                while(opStack.peek()!='('){
                    char operator = opStack.pop();
                    int num1 = numStack.pop();
                    int num2 = numStack.pop();
                    int result = calculate(operator, num1, num2);
                    numStack.push(result);
                }
                opStack.pop();
            }
            else if((c=='+')||(c=='-')||(c=='*')||(c=='/')){
                while((!opStack.isEmpty()&&precedence(c,opStack.peek()))){
                    char operator = opStack.pop();
                    int num1 = numStack.pop();
                    int num2 = numStack.pop();
                    int result = calculate(operator, num1, num2);
                    numStack.push(result);
                }
                opStack.push(c);
            }
        }
        while(!opStack.isEmpty()){
            char operator = opStack.pop();
            int num1 = numStack.pop();
            int num2 = numStack.pop();
            int result = calculate(operator, num1, num2);
            numStack.push(result);
        }
        return numStack.pop();
    }
    
    public int calculate(char operator, int a, int b){
        int ret = 0;
        switch(operator){
            case '+':
                ret = b+a;
                break;
            case '-':
                ret = b-a;
                break;
            case '*':
                ret = b*a;
                break;
            case '/':
                ret = b/a;
                break;
        }
        return ret;
    }
    
    public boolean precedence(char op1, char op2) {
        if (op2 == '(' || op2 == ')') return false;
        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;
        return true;
    }
    
}
