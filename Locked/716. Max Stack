class MaxStack {
    
    DLNode head;
    DLNode tail;
    TreeMap<Integer, List<DLNode>> map;
    
    class DLNode {
        int value;
        DLNode pre;
        DLNode post;
        
        public DLNode() {
            
        }
        
        public DLNode(int value){
            this.value = value;
        }
    }
    
    public MaxStack() {
        head = new DLNode();
        tail = new DLNode();
        head.post = tail;
        tail.pre = head;
        map = new TreeMap();
    }
    
    public void insertAtTail(DLNode node){
        DLNode pre = tail.pre;
        pre.post = node;
        node.pre = pre;
        node.post = tail;
        tail.pre = node;
    }
    
    public void remove(DLNode node) {
        DLNode pre = node.pre;
        DLNode post = node.post;
        pre.post = post;
        post.pre = pre;
    }
    
    public DLNode getTail() {
        DLNode ret = tail.pre;
        remove(ret);
        return ret;
    }

    /*
     * @param number: An integer
     * @return: nothing
     */    
    public void push(int x) {
        DLNode node = new DLNode(x);
        insertAtTail(node);
        if(map.get(x)==null) map.put(x, new ArrayList<DLNode>());
        map.get(x).add(node);
    }
    

    public int pop() {
        DLNode node = getTail();
        List<DLNode> list = map.get(node.value);
        list.remove(list.size()-1);
        if(list.size()==0) map.remove(node.value);
        return node.value;
    }

    /*
     * @return: An integer
     */    
    public int top() {
        DLNode node = getTail();
        insertAtTail(node);
        return node.value;
    }

    /*
     * @return: An integer
     */    
    public int peekMax() {
        int maxKey = map.lastKey();
        return maxKey;
    }

    /*
     * @return: An integer
     */    
    public int popMax() {
        int maxKey = map.lastKey();
        List<DLNode> temp = map.get(maxKey);
        DLNode node = temp.get(temp.size()-1);
        remove(node);
        List<DLNode> list = map.get(maxKey);
        list.remove(list.size()-1);
        if(list.size()==0) map.remove(maxKey);
        return maxKey;
    }
}
