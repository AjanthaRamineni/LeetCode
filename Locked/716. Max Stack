class MaxStack {
    class DLNode {
        int val;
        DLNode pre, post;
        public DLNode(int val) {
            this.val = val;
        }
        public DLNode() {
            
        }
    }
    
    DLNode head, tail;
    TreeMap<Integer, List<DLNode>> map;
    public MaxStack() {
        head = new DLNode();
        tail = new DLNode();
        head.post = tail;
        tail.pre = head;
        map = new TreeMap();
    }

    public void insertAtHead(DLNode node) {
        node.pre = head;
        node.post = head.post;
        head.post.pre = node;
        head.post = node;
    }
    
    public void delete(DLNode node) {
        DLNode pre = node.pre;
        DLNode post = node.post;
        pre.post = post;
        post.pre = pre;
    }
    
    public DLNode popHead() {
        DLNode ret = head.post;
        delete(ret);
        return ret;
    }
      
    public void push(int x) {
        DLNode node = new DLNode(x);
        insertAtHead(node);
        map.putIfAbsent(x, new ArrayList());
        map.get(x).add(node);
    }

    public int pop() {
        DLNode pop = popHead();
        List<DLNode> list = map.get(pop.val);
        list.remove(list.size()-1);
        map.put(pop.val, list);
        return pop.val;
    }

    /*
     * @return: An integer
     */    
    public int top() {
        return head.post.val;
    }

    /*
     * @return: An integer
     */    
    public int peekMax() {
        int max = map.lastKey();
        return max;
    }

    /*
     * @return: An integer
     */    
    public int popMax() {
        int max = map.lastKey();
        List<DLNode> list = map.get(max);
        delete(list.get(list.size()-1));
        list.remove(list.size()-1);
        map.put(max, list);
        return max;
    }
}
