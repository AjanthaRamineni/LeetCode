class NumMatrix {
int[][] dp;
//O(mn)
public NumMatrix(int[][] matrix) {
    if (matrix.length == 0 || matrix[0].length == 0) return;
    dp = new int[matrix.length][matrix[0].length];
    for (int r = 0; r < matrix.length; r++) {
        for (int c = 0; c < matrix[0].length; c++) {
            dp[r][c] = (c==0)?matrix[r][c]:(dp[r][c-1] + matrix[r][c]);
        }
    }
}
//O(m)
public int sumRegion(int row1, int col1, int row2, int col2) {
    int sum = 0;
    if(col1==0){
        for (int row = row1; row <= row2; row++) {
        sum += dp[row][col2];
    }
    return sum;
    }
    for (int row = row1; row <= row2; row++) {
        sum += dp[row][col2] - dp[row][col1-1];
    }
    return sum;
}
}


class NumMatrix {

    int[][] dp;
    //O(mn) time and space
    public NumMatrix(int[][] matrix) {
        if(matrix==null || matrix.length==0) return;
        int m = matrix.length, n = matrix[0].length;
        dp = new int[m+1][n+1];
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                dp[i+1][j+1] = dp[i+1][j] + dp[i][j+1] + matrix[i][j] - dp[i][j];
            }
        }
    }
    
    //O(1) time and O(1) space
    public int sumRegion(int row1, int col1, int row2, int col2) {
        return dp[row2+1][col2+1] - dp[row2+1][col1] - dp[row1][col2+1] + dp[row1][col1];
    }
}
