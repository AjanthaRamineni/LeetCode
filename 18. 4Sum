//O(n3) and O(1)
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
         List<List<Integer>> list = new ArrayList();
         if(nums==null || nums.length<4) return list;
        Arrays.sort(nums);
        for(int j=0;j<nums.length-3;j++){
            if(j==0 || nums[j]!=nums[j-1]){
                for(int i=j+1;i<nums.length-2;i++){
                    if(i==j+1 || nums[i]!=nums[i-1]){
                        int low = i+1, high = nums.length-1;
                        while(low<high){
                            int sum = nums[i]+nums[j]+nums[low]+nums[high];
                            if(sum==target){
                                list.add(Arrays.asList(nums[j], nums[low],nums[high],nums[i]));
                                while(low<high && nums[low]==nums[low+1]) low++;
                                while(low<high && nums[high]==nums[high-1]) high--;
                                low++;
                                high--;
                            }
                            else if(sum>target)
                                high--;
                            else
                                low++;
                        }
                    }
                }
            }
        }
        return list;
    }
}
