//O(nlogn) time and O(n) space
class Solution {
    public int scheduleCourse(int[][] courses) {
        if(courses==null || courses.length==0) return 0;
        int n = courses.length;
        Arrays.sort(courses, new Comparator<int[]>(){
            public int compare(int[] a, int[] b) {
                return a[1]-b[1];
            }
        });
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a,b)->(b-a));
        int time = 0;
        for(int[] c:courses){
            time+=c[0];
            pq.add(c[0]);
            if(time>c[1]) time-=pq.poll();
        }
        return pq.size();
    }
}
