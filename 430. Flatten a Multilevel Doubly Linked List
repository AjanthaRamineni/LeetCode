//O(n) time and space
class Solution {
    public Node flatten(Node head) {
        Node cur = head;
        Stack<Node> stack = new Stack();
        while(cur != null) {
            if(cur.child != null) {
                stack.push(cur.next);
                cur.next = cur.child;
                if(cur.next != null) cur.next.prev = cur;
                cur.child = null;
            } else if(cur.next == null && !stack.isEmpty()) { // reach of tail of child, reconnet the next of parent
                cur.next = stack.pop();
                if(cur.next != null) cur.next.prev = cur;
            }
            cur = cur.next;
        }
        return head;
    }
}
