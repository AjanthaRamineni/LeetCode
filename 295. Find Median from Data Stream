class MedianFinder {

    PriorityQueue<Integer> minheap;
    PriorityQueue<Integer> maxheap;
    public MedianFinder() {
        minheap = new PriorityQueue();
        maxheap = new PriorityQueue<Integer>(new Comparator<Integer>(){
            public int compare(Integer a, Integer b){
                return b-a;
            }
        });
    }
    
    //O(logn) and O(n)
    public void addNum(int num) {
        maxheap.offer(num);
        minheap.offer(maxheap.poll());
        if(maxheap.size()<minheap.size()-1){
            maxheap.offer(minheap.poll());
        }
    }
    
    //O(1) and O(n)
    public double findMedian() {
        if(minheap.size()==maxheap.size()){
            return (minheap.peek()+maxheap.peek())/2.0;
        }
        else{
            return (double)minheap.peek();
        }
    }
}
