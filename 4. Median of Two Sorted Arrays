//O(log(m+n)) time and space
class Solution {
    
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
        int totalLength = m+n;
        if((totalLength&1)==0){
            double mid1 = findKthHelper(nums1, 0, nums2, 0, totalLength/2);
            double mid2 = findKthHelper(nums1, 0, nums2, 0, totalLength/2 + 1);
            return (mid1+mid2)/2.0;
        }
        else{
            double mid = findKthHelper(nums1, 0, nums2, 0, totalLength/2 + 1);
            return mid;
        }
    }
    
    public double findKthHelper(int[] A, int aStart, int[] B, int bStart, int k) {
        if(aStart>=A.length) return B[bStart+k-1];
        if(bStart>=B.length) return A[aStart+k-1];
        if(k==1) return Math.min(A[aStart], B[bStart]);
        int aMidIndex = aStart + k/2 - 1;
        int bMidIndex = bStart + k/2 - 1;
        int aMidValue = aMidIndex>=A.length ? Integer.MAX_VALUE : A[aMidIndex];
        int bMidValue = bMidIndex>=B.length ? Integer.MAX_VALUE : B[bMidIndex];
        //A left and B right
        if(aMidValue <= bMidValue) {
            return findKthHelper(A, aMidIndex+1, B, bStart, k-k/2);
        }
        else {
            return findKthHelper(A, aStart, B, bMidIndex+1, k-k/2);
        }
    }
    
}
