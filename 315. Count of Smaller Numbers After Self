class Solution {
    
    class TreeNode {
        int val;
        TreeNode left, right;
        int repeat, leftSum;
        public TreeNode(int val) {
            this.val = val;
            left = null;
            right = null;
            repeat = 0;
            leftSum = 0;
        }
    }
    
    //O(n^2) time and O(n) space
    public List<Integer> countSmaller(int[] nums) {
        if(nums==null || nums.length==0) return new ArrayList();
        int n = nums.length;
        Integer[] result = new Integer[n];
        TreeNode root = new TreeNode(nums[n-1]);
        for(int i=n-1;i>=0;i--) {
            result[i] = insert(root, nums[i]);
        }
        return Arrays.asList(result);
    }
    
    public int insert(TreeNode root, int val) {
        int sum = 0;
        while(root.val!=val) {
            if(root.val>val) {
                if(root.left==null) root.left = new TreeNode(val);
                root.leftSum++;
                root = root.left;
            }
            else {
                sum+=root.leftSum+root.repeat;
                if(root.right==null)
                    root.right = new TreeNode(val);
                root = root.right;
            }
        }
        root.repeat++;
        return sum+root.leftSum;
    }
    
}


//O(nlogn) time and O(n) space
class Solution {
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> result = new ArrayList();
        if(nums==null || nums.length==0) return result;
        int n = nums.length;
        int[] indexes = new int[n];
        int[] count = new int[n];
        for(int i=0;i<n;i++) {
            indexes[i] = i;
        }
        mergeSort(nums, 0, nums.length-1, count, indexes);
        for(int c:count) result.add(c);
        return result;
    }
    
    public void mergeSort(int[] nums, int low, int high, int[] count, int[] indexes) {
        if(low>=high) return;
        int mid = low + (high-low)/2;
        mergeSort(nums, low, mid, count, indexes);
        mergeSort(nums, mid+1, high, count, indexes);
        int i = low, j = mid+1;
        int rightCount = 0;
        while(i<=mid && j<=high) {
            if(nums[indexes[i]]>nums[indexes[j]]) {
                rightCount++;
                j++;
            }
            else {
                count[indexes[i]]+=rightCount;
                i++;
            }
        }
        while(i<=mid) {
            count[indexes[i]]+=rightCount;
            i++;
        }
        merge(nums, low, high, indexes);
    }
    
    public void merge(int[] nums, int low, int high, int[] indexes) {
        if(low>=high) return;
        int mid = low + (high-low)/2;
        int[] aux = new int[high-low+1];
        int i = low, j = mid+1, k = 0;
        while(k<aux.length) {
            int a = (i<=mid)?nums[indexes[i]]:Integer.MAX_VALUE;
            int b = (j<=high)?nums[indexes[j]]:Integer.MAX_VALUE;
            aux[k++] = (a<=b)?indexes[i++]:indexes[j++];
        }
        int p = 0;
        while(p<aux.length) { indexes[p+low] = aux[p]; p++; } 
    }
    
}
