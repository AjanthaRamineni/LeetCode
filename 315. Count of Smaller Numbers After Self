class Solution {
    
    class TreeNode {
        int val;
        TreeNode left, right;
        int repeat, leftSum;
        public TreeNode(int val) {
            this.val = val;
            left = null;
            right = null;
            repeat = 0;
            leftSum = 0;
        }
    }
    
    //O(nlogn) time and O(n) space
    public List<Integer> countSmaller(int[] nums) {
        if(nums==null || nums.length==0) return new ArrayList();
        int n = nums.length;
        Integer[] result = new Integer[n];
        TreeNode root = new TreeNode(nums[n-1]);
        for(int i=n-1;i>=0;i--) {
            result[i] = insert(root, nums[i]);
        }
        return Arrays.asList(result);
    }
    
    public int insert(TreeNode root, int val) {
        int sum = 0;
        while(root.val!=val) {
            if(root.val>val) {
                if(root.left==null) root.left = new TreeNode(val);
                root.leftSum++;
                root = root.left;
            }
            else {
                sum+=root.leftSum+root.repeat;
                if(root.right==null)
                    root.right = new TreeNode(val);
                root = root.right;
            }
        }
        root.repeat++;
        return sum+root.leftSum;
    }
    
}
