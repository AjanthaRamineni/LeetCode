class MapSum {

    class TrieNode{
        TrieNode[] children;
        int val;
        boolean isWord;
        public TrieNode() {
            children = new TrieNode[26];
            val = 0;
            isWord = false;
        }
    }
    
    TrieNode root;
    
    public MapSum() {
        root = new TrieNode();
    }
    
    //O(n) time and space
    public void insert(String word, int val) {
        TrieNode node = root;
        for(int i=0;i<word.length();i++){
            int index = word.charAt(i)-'a';
            if(node.children[index]==null) node.children[index] = new TrieNode();
            node = node.children[index];
        }
        node.isWord = true;
        node.val = val;
    }
    
    //O(n) time and space
    public int sum(String word) {
        TrieNode node = root;
        for(int i=0;i<word.length();i++){
            int index = word.charAt(i)-'a';
            if(node.children[index]==null) return 0;
            node = node.children[index];
        }
        return dfs(node);
    }
    
    public int dfs(TrieNode node){
        if(node==null) return 0;
        int sum = 0;
        for(TrieNode child:node.children){
            sum+=dfs(child);
        }
        return node.val + sum;
    }
}
