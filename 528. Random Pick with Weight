class Solution {

    Random rand;
    int[] nums;
    public Solution(int[] w) {
        if(w==null || w.length==0) return;
        nums = new int[w.length];
        nums[0] = w[0];
        for(int i=1;i<nums.length;i++) {
            nums[i] = nums[i-1] + w[i];
        }
        rand = new Random();
    }
    
    //O(logn) time and O(1) space
    public int pickIndex() {
        int index = rand.nextInt(nums[nums.length-1]) + 1;
        return searchInsertPosition(nums, index);
    }
    
    //O(logn) time and O(1) space
    public int searchInsertPosition(int[] nums, int target) {
        int low = 0, high = nums.length-1;
        while(low<=high) {
            int mid = low + (high-low)/2;
            if(nums[mid]==target) return mid;
            else if(nums[mid]<target) low = mid+1;
            else high = mid-1;
        }
        return low;
    }
    
}
