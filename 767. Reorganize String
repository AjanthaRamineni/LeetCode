//O(nlogn) time and O(n) space
class Solution {
    
    class Tuple {
        Character c;
        Integer count;
        public Tuple(Character c, Integer count) {
            this.c = c;
            this.count = count;
        }
    }
    
    public String reorganizeString(String s) {
        if(s==null || s.length()==0) return s;
        int n = s.length();
        Map<Character, Integer> map = new HashMap();
        for(char c:s.toCharArray()) {
            map.put(c, map.getOrDefault(c,0)+1);
            int val = map.get(c);
            if(val>((n+1)/2)) return "";
        }
        PriorityQueue<Tuple> pq = new PriorityQueue(1, new Comparator<Tuple>(){
            public int compare(Tuple a, Tuple b) {
                return b.count - a.count;
            }
        });
        for(Character key:map.keySet()) {
            pq.offer(new Tuple(key, map.get(key)));
        }
        StringBuffer sb = new StringBuffer();
        while(!pq.isEmpty()) {
            Tuple first = pq.poll();
            if(sb.length()==0 || sb.charAt(sb.length()-1)!=first.c) {
                sb.append(first.c);
                first.count--;
                if(first.count==0) continue;
                pq.offer(first);
            }
            else {
                Tuple second = pq.poll();
                sb.append(second.c);
                second.count--;
                pq.offer(first);
                if(second.count==0) continue;
                pq.offer(second);
            }
        }
        return sb.toString();
    }
}
