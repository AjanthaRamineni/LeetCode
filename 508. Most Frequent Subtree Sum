//O(n) time and space
class Solution {
    Map<Integer, Integer> map;
    int max; 
    public int[] findFrequentTreeSum(TreeNode root) {
        max = 0;
        map = new HashMap();
        postorder(root);
        List<Integer> list = new ArrayList();
        for(int key:map.keySet()){
            if(max==map.get(key))
                list.add(key);
        }
        int[] result = new int[list.size()];
        for(int i=0;i<list.size();i++)
            result[i] = list.get(i);
        return result;
    }
    public int postorder(TreeNode root){
        if(root==null) return 0;
        int left = postorder(root.left);
        int right = postorder(root.right);
        int sum = root.val+left+right;
        map.put(sum,map.getOrDefault(sum,0)+1);
        max = Math.max(max, map.get(sum));
        return sum;
    }
}
