//O(n) time and space
class Solution {
    
    public void recoverTree(TreeNode root) {
        if(root==null) return;
        List<Integer> list = inorder(root);
        boolean adj = false;
        int first = 0, second = 0;
        for(int i=0;i<list.size()-1;i++){
            if(list.get(i)<list.get(i+1)) continue;
            else{
                if(adj){
                    second = list.get(i+1);
                    break;
                }
                else{
                    first = list.get(i);
                    second = list.get(i+1);
                    adj = true;
                }
            }
        }
        swap(root, first, second);
    }
    
    public void swap(TreeNode root, int first, int second){
        if(root==null) return;
        Queue<TreeNode> queue = new LinkedList();
        queue.offer(root);
        while(!queue.isEmpty()){
            int level = queue.size();
            for(int i=0;i<level;i++){
                TreeNode temp = queue.poll();
                if(temp.val==first) temp.val = second;
                else if(temp.val==second) temp.val = first;
                if(temp.left!=null) queue.offer(temp.left);
                if(temp.right!=null) queue.offer(temp.right);
            }
        }
    }
    
    public List<Integer> inorder(TreeNode root){
        List<Integer> list = new ArrayList();
        if(root==null) return list;
        Stack<TreeNode> stack = new Stack();
        TreeNode cur = root;
        boolean done = false;
        while(!done){
            if(cur!=null){
                stack.push(cur);
                cur = cur.left;
            }
            else{
                if(stack.isEmpty()){
                    done = true;
                }
                else{
                    cur = stack.pop();
                    list.add(cur.val);
                    cur = cur.right;
                }
            }
        }
        return list;
    }
    
}
