//O(n) and O(n) solution
class Solution {
    public void recoverTree(TreeNode root) {
        if(root==null) return;
        List<Integer> list = inorderTraversal(root);
        boolean flag= true;
        int temp1=0, temp2=0;
        for(int i=0;i<list.size();i++)
            System.out.println(list.get(i));
        for(int i=0;i<list.size();i++){
            if(i==0 || list.get(i-1) < list.get(i)) continue;
            if(flag) { temp1 = list.get(i-1); temp2 = list.get(i); flag = false; }
            else { temp2 = list.get(i); break; }
        }
        System.out.println(temp1+""+temp2);
        if(!flag) swap(root, temp1, temp2);
    }
    public void swap(TreeNode root, int temp1, int temp2){
        System.out.println("In swap");
        if(root==null) return;
        Queue<TreeNode> q = new LinkedList();
        q.offer(root);
        while(!q.isEmpty()){
            int level = q.size();
            for(int i=0;i<level;i++){
                TreeNode temp = q.poll();
                if(temp.val == temp1){
                    temp.val = temp2;
                }
                else if(temp.val == temp2){
                    temp.val = temp1;
                }
                if(temp.left!=null) q.offer(temp.left);
                if(temp.right!=null) q.offer(temp.right);
            }
        }
        return;
    }
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList();
        if(root==null) return list;
        Stack<TreeNode> stack = new Stack();
        boolean done = false;
        TreeNode cur = root;
        while(!done){
            if(cur!=null){
                stack.push(cur);
                cur = cur.left;
            }
            else{
                if(stack.isEmpty())
                    done = true;
                else{
                    cur = stack.pop();
                    list.add(cur.val);
                    cur = cur.right;
                }
            }
        }
        return list;
    }
}
