//O(nlogn) time and O(n) space
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> result = new ArrayList();
        if(root==null) return result;
        int min = 0, max = 0;
        Map<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new HashMap();
        Queue<TreeNode> queue = new LinkedList();
        Queue<Integer> cq = new LinkedList();
        queue.offer(root);
        cq.offer(0);
        int level = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int k=0;k<size;k++){
                TreeNode node = queue.poll();
                int count = cq.poll();
                map.putIfAbsent(count, new TreeMap());
                map.get(count).putIfAbsent(level, new PriorityQueue());
                map.get(count).get(level).add(node.val);
                if(node.left!=null){
                    cq.offer(count-1);
                    queue.offer(node.left);
                    min = Math.min(min, count-1);
                }
                if(node.right!=null){
                    cq.offer(count+1);
                    queue.offer(node.right);
                    max = Math.max(max, count+1);
                }
            }
            level++;
        }
        for(int i=min;i<=max;i++){
            TreeMap<Integer, PriorityQueue<Integer>> tempMap = map.get(i);
            List<Integer> list = new ArrayList();
            for(int key:tempMap.keySet()){
                PriorityQueue<Integer> pq = tempMap.get(key);
                while(!pq.isEmpty()){
                    list.add(pq.poll());
                }
            }
            result.add(list);
        }
        return result;
    }
}
