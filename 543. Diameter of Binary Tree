//O(n) time and O(n) space
class Solution {
    int max = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        //Santiy check
        if(root==null) return max;
        helper(root);
        return max;
    }
    public int helper(TreeNode node){
        if(node==null) return 0;
        int left = helper(node.left);
        int right = helper(node.right);
        max = Math.max(max, left+right);
        return 1+Math.max(left, right);
    }
}

//O(n^2) time and O(n) space
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        //Santiy check
        if(root==null) return 0;
        Queue<TreeNode> queue = new LinkedList();
        queue.offer(root);
        int max = 0;
        while(!queue.isEmpty()){
            int level = queue.size();
            for(int i=0;i<level;i++){
                TreeNode temp = queue.poll();
                int left = maxDepth(temp.left);
                int right = maxDepth(temp.right);
                System.out.println(left+","+right);
                max = Math.max(max, left+right);
                if(temp.left!=null) queue.offer(temp.left);
                if(temp.right!=null) queue.offer(temp.right);
            }
        }
        return max;
    }
    //O(n) time and space
    public int maxDepth(TreeNode node){
        if(node==null) return 0;
        return 1 + Math.max(maxDepth(node.left), maxDepth(node.right));
    }
}
