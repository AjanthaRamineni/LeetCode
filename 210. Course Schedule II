//O(n) time and space
class Solution {
    
    Map<Integer, List<Integer>> adjlist;
    int[] outdegree;
    
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        construct(numCourses, prerequisites);
        return topSort(numCourses);
    }
    
    public void construct(int n, int[][] pre){
        adjlist = new HashMap();
        outdegree = new int[n];
        for(int[] p:pre){
            int dependent = p[0];
            int independent = p[1];
            outdegree[dependent]++;
            if(adjlist.get(independent)==null) adjlist.put(independent, new ArrayList());
            adjlist.get(independent).add(dependent);
        }
    }
    
    public int[] topSort(int n) {
        int count = 0;
        int[] result = new int[n];
        Queue<Integer> queue = new LinkedList();
        for(int i=0;i<n;i++){
            if(outdegree[i]==0) {
                result[count++] = i;
                queue.offer(i);
            }
        }
        while(!queue.isEmpty()){
            int u = queue.poll();
            if(adjlist.get(u)==null) continue;
            for(int v:adjlist.get(u)){
                if(--outdegree[v]==0){
                    queue.offer(v);
                    result[count++] = v;
                }
            }
        }
        return (count==n)?result:new int[0];
    }
}
