//O(mn*2^6) time and space
class Solution {
    
    class State {
        int x, y, keys;
        public State(int x, int y, int keys) {
            this.x = x;
            this.y = y;
            this.keys = keys;
        }
    }
    
    int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    public int shortestPathAllKeys(String[] grid) {
        int sx = 0, sy = 0, max = 0, m = grid.length, n = grid[0].length();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                char c = grid[i].charAt(j);
                if (c == '@') {
                    sx = i;
                    sy = j;
                }
                if (c >= 'a' && c <= 'f') {
                    max = Math.max(c - 'a' + 1, max);
                }
            }
        }
        Queue<State> queue = new LinkedList();
        Set<String> set = new HashSet();
        queue.offer(new State(sx,sy,0));
        set.add(sx+","+sy+","+0);
        if(0==((1<<max)-1)) return 0;
        int level = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                State state = queue.poll();
                int i = state.x, j = state.y, prevKeys = state.keys;
                
                for(int[] dir:dirs) {
                    int x = i + dir[0];
                    int y = j + dir[1];
                    int keys = prevKeys;
                    if(x<0 || y<0 || x>=m || y>=n || grid[x].charAt(y)=='#') continue;
                    char c = grid[x].charAt(y);
                    if (c >= 'A' && c <= 'F' && ((keys >> (c - 'A')) & 1) == 0) {
                        continue;
                    }
                    if(c>='a' && c<='f') keys = keys | (1<<(c-'a'));
                    if(!set.contains(x+","+y+","+keys)) {
                        if(keys==((1<<max)-1)) return level+1;
                        set.add(x+","+y+","+keys);
                        queue.offer(new State(x,y,keys));
                        System.out.println(x+","+y+","+keys);
                    }
                }
            }
            level++;
        }
        return -1;
    }
}
