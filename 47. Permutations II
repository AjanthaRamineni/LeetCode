//O(n!) time and space
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> list = new ArrayList();
        List<Integer> sublist = new ArrayList();
        Arrays.sort(nums);
        backtrack(list, sublist, nums, new boolean[nums.length]);
        return list;
    }
    
    public void backtrack(List<List<Integer>> list, List<Integer> sublist, int[] nums, boolean[] visited){
        if(sublist.size()==nums.length){
            list.add(new ArrayList(sublist));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(visited[i]) continue;
            if(i>0 && (nums[i]==nums[i-1]) && (visited[i-1])) continue;
            visited[i] = true;
            sublist.add(nums[i]);
            backtrack(list, sublist, nums, visited);
            visited[i] = false;
            sublist.remove(sublist.size()-1);
        }
    }
}
