//O(N^2) time and space
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Map<Integer, List<Integer>> map = new HashMap<>();  //node -> initial nodes infect this node
        for(int i : initial) {
            Set<Integer> visited = fill(initial);
            Queue<Integer> q = new LinkedList<>();
            q.add(i);
            while(!q.isEmpty()) {
                int cur = q.poll();
                for(int j = 0; j < graph[cur].length; j++) {
                    if(graph[cur][j] == 1) {
                        if(!visited.contains(j)) {
                            visited.add(j);
                            q.add(j);
                            map.putIfAbsent(j, new ArrayList<>());
                            map.get(j).add(i);
                        }
                    }
                }
            }
        }
        
        int[] res = new int[graph.length];//node -> safe nodes it infects
        for(int node : map.keySet()) {
            if(map.get(node).size() == 1) {
                int i = map.get(node).get(0);
                res[i]++;
            }
        }
        int max = 0;
        int removed = -1;
        for(int i = 0; i < res.length; i++) {
            if(res[i] > max) {
                max = res[i];
                removed = i;
            }
        }
        Arrays.sort(initial);
        return removed == -1 ? initial[0] : removed;
    }
    
    private Set<Integer> fill(int[] initial) {
        Set<Integer> visited = new HashSet<>();
        for(int i : initial) {
            visited.add(i);
        }
        return visited;
    }
}
