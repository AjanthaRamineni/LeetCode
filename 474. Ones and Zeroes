//O(kmn+kl) time and O(mn+l) space
class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        if(strs==null || strs.length==0) return 0;
        int[][] dp = new int[m+1][n+1];
        for(String str:strs){
            int[] count = count(str);
            for (int i=m;i>=count[0];i--) 
            for (int j=n;j>=count[1];j--) 
                dp[i][j] = Math.max(1 + dp[i-count[0]][j-count[1]], dp[i][j]);
        }
        return dp[m][n];
    }
    
    public int helper(String[] strs, int m, int n, int index){
        //Base case: When we run out of numbers
        if(0>m || 0>n) return 0;
        //Base case: When we run out of the string
        if(index>=strs.length) return 0;
        int[] count = count(strs[index]);
        //Recursive case: Just include and exclude the current string and return the max
        //Include case
        if((m-count[0]>=0) && (n-count[1])>=0)
            return Math.max(1+helper(strs,m-count[0],n-count[1],index+1), helper(strs,m,n,index+1));
        else
            return helper(strs,m,n,index+1);
    }
    
    public int[] count(String str){
        int[] result = new int[2];
        for(char c:str.toCharArray()){
            if(c=='0') result[0]++;
            else if(c=='1') result[1]++;
        }
        return result;
    }
    
}
