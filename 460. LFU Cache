class LFUCache {

    Map<Integer, Integer> map;
    Map<Integer, Integer> freqMap;
    Map<Integer, LinkedHashSet<Integer>> locsMap;
    int min;
    int capacity;
    public LFUCache(int capacity) {
        map = new HashMap();
        freqMap = new HashMap();
        locsMap = new HashMap();
        this.min = 0;
        this.capacity = capacity;
    }
    
    //O(1) time
    public int get(int key) {
        if(!map.containsKey(key)) return -1;
        int freq = freqMap.get(key);
        int ret = map.get(key);
        int newFreq = freq+1;
        freqMap.put(key, newFreq);
        locsMap.get(freq).remove(key);
        if(locsMap.get(freq).size()==0 && min==freq) {
            min = newFreq;
        }
        locsMap.putIfAbsent(newFreq, new LinkedHashSet());
        locsMap.get(newFreq).add(key);
        return ret;
    }
    
    //O(1) time
    public void put(int key, int value) {
        if(capacity<=0) return;
        if(map.containsKey(key)) {
            map.put(key, value);
            get(key);
            return;
        }
        map.put(key, value);
        freqMap.put(key, 1);
        if(map.size()>capacity) {
            int rem = locsMap.get(min).iterator().next();
            locsMap.get(min).remove(rem);
            map.remove(rem);
            freqMap.remove(rem);
        }
        locsMap.putIfAbsent(1, new LinkedHashSet());
        locsMap.get(1).add(key);
        min = 1;
    }
}
