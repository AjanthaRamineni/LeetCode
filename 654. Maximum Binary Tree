//O(n2) time and O(n) space
class Solution {
    
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        if(nums==null || nums.length==0) return null;
        return helper(nums, 0, nums.length-1);
    }
    
    public TreeNode helper(int[] nums, int start, int end){
        if(start>end) return null;
        if(start==end) return new TreeNode(nums[start]);
        int max = nums[start], maxIndex = start;
        for(int i=start;i<=end;i++){
            if(max<nums[i]){
                max = nums[i];
                maxIndex = i;
            }
        }
        TreeNode root = new TreeNode(max);
        root.left = helper(nums,start,maxIndex-1);
        root.right = helper(nums,maxIndex+1,end);
        return root;
    }
    
}
