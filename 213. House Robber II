//O(n) and O(1)
class Solution {
    public int rob(int[] nums) {
        int case1 = rob1(nums);
        int case2 = rob2(nums);
        return Math.max(case1, case2);
    }
    //We robbed the first house for sure so that we cant rob the last house
    public int rob1(int[] nums) {
        if(nums==null || nums.length==0) return 0;
        int n = nums.length;
        if(n==1) return nums[0];
        if(n==2) return Math.max(nums[0],nums[1]);
        int a = nums[0];
        int b = Math.max(nums[0],nums[1]);
        int ret = Math.max(a,b);
        for(int i=2;i<n-1;i++){
           ret = Math.max(a+nums[i],b);
           a = b;
           b = ret;
        }
        return ret;
    }
    //We dont rob the first house and hence we can rob the last house
    public int rob2(int[] nums) {
        if(nums==null || nums.length==0) return 0;
        int n = nums.length;
        if(n==1) return 0;
        if(n==2) return nums[1];
        int a = 0;
        int b = nums[1];
        int ret = Math.max(a,b);
        for(int i=2;i<n;i++){
           ret = Math.max(a+nums[i],b);
           a = b;
           b = ret;
        }
        return ret;
    }
}
