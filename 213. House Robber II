//My Idea is simple
//Just create 2 cases and choose the max out of it
//In the 1st case, we are robbing house 1 for sure
//In the 2nd case, we are not robbing the house 1 and hence we can rob last house if we want to
//O(n) time and space
class Solution {
    public int rob(int[] nums) {
        int m1 = case1(nums);
        int m2 = case2(nums);
        return Math.max(m1, m2);
    }
    public int case1(int[] nums) {
        if(nums==null || nums.length==0) return 0;
        if(nums.length==1) return nums[0];
        if(nums.length==2) return Math.max(nums[0],nums[1]);
        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for(int i=2;i<nums.length-1;i++){
            dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i]);
        }
        return dp[n-2];
    }
    public int case2(int[] nums) {
        if(nums==null || nums.length==0) return 0;
        if(nums.length==1) return nums[0];
        if(nums.length==2) return Math.max(nums[0],nums[1]);
        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = 0;
        dp[1] = nums[1];
        for(int i=2;i<nums.length;i++){
            dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i]); 
        }
        return dp[n-1];
    }
}
