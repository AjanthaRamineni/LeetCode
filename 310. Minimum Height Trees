//O(n) time and space
class Solution {
    Map<Integer, Set<Integer>> adjlist;
    List<Integer> leaves;
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        if(n==1) {
            leaves = new ArrayList();
            leaves.add(0);
            return leaves;
        }
        construct(n, edges);
        topSort(n);
        return leaves;
    }
    
    public void construct(int n, int[][] edges) {
        adjlist = new HashMap();
        leaves = new ArrayList();
        for(int i=0;i<n;i++){
            adjlist.put(i, new HashSet());
        }
        for(int[] edge:edges){
            int u = edge[0], v = edge[1];
            adjlist.get(u).add(v);
            adjlist.get(v).add(u);
        }
        for(int key:adjlist.keySet()){
            int size = adjlist.get(key).size();
            if(size==1){
                leaves.add(key);
            }
        }
    }
    
    public void topSort(int n){
        while(n>2) {
            List<Integer> newleaves = new ArrayList();
            n-=leaves.size();
            for(Integer leaf:leaves){
                for(Integer neighbor:adjlist.get(leaf)){
                    adjlist.get(neighbor).remove(leaf);
                    if(adjlist.get(neighbor).size()==1) newleaves.add(neighbor);
                }
            }
            leaves = newleaves;
        }
        
    }
    
}
