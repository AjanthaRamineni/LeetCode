//O(V+E) time and space
class Solution {
    Map<Integer, Set<Integer>> adjlist;
    int timeStamp = 0;
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        construct(n, connections);
        List<List<Integer>> result = new ArrayList();
        boolean[] visited = new boolean[n];
        int[] time = new int[n];
        dfs(result, visited, 0, -1, time);
        return result;
    }
    
    public void construct(int n, List<List<Integer>> connections) {
        adjlist = new HashMap();
        for(int i=0;i<n;i++) {
            adjlist.putIfAbsent(i, new HashSet());
        }
        for(List<Integer> connection:connections) {
            adjlist.get(connection.get(0)).add(connection.get(1));
            adjlist.get(connection.get(1)).add(connection.get(0));
        }
    }
    
    public void dfs(List<List<Integer>> result, boolean[] visited, int u, int parent, int[] time) {
        visited[u] = true;
        time[u] = timeStamp++;
        int curTimeStamp = time[u];
        for(int v:adjlist.get(u)) {
            if(parent==v) continue;
            if(!visited[v]) dfs(result, visited, v, u, time);
            time[u] = Math.min(time[u], time[v]);
            if(curTimeStamp<time[v]) result.add(Arrays.asList(u,v));
        }
    }
    
}
