//O(n) time and space
class Solution {
    public int[] exclusiveTime(int n, List<String> logs) {
        if(logs==null || logs.size()==0) return new int[0];
        int[] result = new int[n];
        Stack<Integer> stack = new Stack();
        String[] tokens = logs.get(0).split(":");
        stack.push(Integer.parseInt(tokens[0]));
        int prev = Integer.parseInt(tokens[2]);
        int i = 1;
        while(i<logs.size()){
            String[] words = logs.get(i).split(":");
            int id = Integer.parseInt(words[0]);
            int time = Integer.parseInt(words[2]);
            String label = words[1];
            if(label.equals("start")){
                if(!stack.isEmpty()){
                    result[stack.peek()]+=(time-prev);
                }
                stack.push(id);
                prev = time;
            }
            else{
                result[stack.peek()]+=(time+1-prev);
                prev = time + 1;
                stack.pop();
            }
            i++;
        }
        return result;
    }
}
