//O(nlogk) time and O(n) space
class Solution {
    public String largestNumber(int[] nums) {
        if(nums==null || nums.length==0) return "0";
        int n = nums.length;
        String[] s = new String[n];
        for(int i=0;i<n;i++){
            s[i] = String.valueOf(nums[i]);
        }
        Arrays.sort(s, new Comparator<String>(){
           public int compare(String s1, String s2){
               String str1 = s1+s2;
               String str2 = s2+s1;
               return str2.compareTo(str1);
           } 
        });
        if(s[0].charAt(0)=='0') return "0";
        StringBuffer sb = new StringBuffer();
        for(int i=0;i<n;i++){
            sb.append(s[i]);
        }
        return sb.toString();
    }
}
