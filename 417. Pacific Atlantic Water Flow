class Solution {
    int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    public List<int[]> pacificAtlantic(int[][] matrix) {
        List<int[]> list = new ArrayList();
        if(matrix==null || matrix.length==0 || matrix[0].length==0) return list;
        int m = matrix.length;
        int n = matrix[0].length;
        Queue<int[]> pq = new LinkedList();
        Queue<int[]> aq = new LinkedList();
        boolean[][] pv = new boolean[m][n];
        boolean[][] av = new boolean[m][n];
        for(int i=0;i<m;i++){
            pv[i][0] = true;
            av[i][n-1] = true;
            pq.offer(new int[]{i,0});
            aq.offer(new int[]{i,n-1});
        }
        for(int j=0;j<n;j++){
            pv[0][j] = true;
            av[m-1][j] = true;
            pq.offer(new int[]{0,j});
            aq.offer(new int[]{m-1,j});
        }
        bfs(matrix, pq, pv);
        bfs(matrix, aq, av);
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(av[i][j]&&pv[i][j]){
                    list.add(new int[]{i,j});
                }
            }
        }
        return list;
    }
    public void bfs(int[][] matrix, Queue<int[]> q, boolean[][] visited){
        while(!q.isEmpty()){
            int[] temp = q.poll();
            for(int[] dir:dirs){
                int x = temp[0] + dir[0];
                int y = temp[1] + dir[1];
                if(x<0 || y<0 || x==matrix.length || y==matrix[0].length || matrix[temp[0]][temp[1]]>matrix[x][y]) continue;
                if(!visited[x][y]){
                    visited[x][y] = true;
                    q.add(new int[]{x,y});
                }
            }
        }
    }
}
