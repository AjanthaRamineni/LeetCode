//O(mnN) time and space
class Solution {
    int M=1000000007;
    public int findPaths(int m, int n, int N, int i, int j) {
        int[][][] dp = new int[m][n][N+1];
        for(int[][] d:dp){
            for(int[] p:d){
                Arrays.fill(p,-1);
            }
        }
        return helper(m,n,N,i,j,dp);
    }
    public int helper(int m, int n, int N, int i, int j, int[][][] dp){
        if(i==m || j==n || i<0 || j<0) return 1;
        if(N==0) return 0;
        if(dp[i][j][N]!=-1) return dp[i][j][N];
        dp[i][j][N] = ((helper(m,n,N-1,i-1,j,dp)+helper(m,n,N-1,i+1,j,dp))%M+(helper(m,n,N-1,i,j-1,dp)+helper(m,n,N-1,i,j+1,dp))%M)%M;
        return dp[i][j][N];
    }
}
