//O(nt) time and O(t) space
class Solution {
    int[] memo;
    public int combinationSum4(int[] nums, int target) {
        memo = new int[target+1];
        Arrays.fill(memo, -1);
        int[] dp = new int[target+1];
        dp[0] = 1;
        for(int t=1;t<=target;t++){
            for(int i=0;i<nums.length;i++){
                if(t>=nums[i]) dp[t]+=(dp[t-nums[i]]);
            }
        }
        return dp[target];
    }
    
    public int recursive(int[] nums, int target){
        if(target<0) return 0;
        if(target==0) return 1;
        int sum = 0;
        for(int i=0;i<nums.length;i++){
            sum+=recursive(nums, target-nums[i]);
        }
        return sum;
    }
    
    public int memoization(int[] nums, int target){
        if(target<0) return 0;
        if(target==0) return 1;
        if(memo[target]!=-1) return memo[target];
        int sum = 0;
        for(int i=0;i<nums.length;i++){
            sum+=memoization(nums, target-nums[i]);
        }
        memo[target] = sum;
        return sum;
    }
}
