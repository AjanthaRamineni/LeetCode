class Solution {
    public int getMoneyAmount(int n) {
        return recursive(1, n);
    }
    public int recursive(int low, int high){
        if(low>=high) return 0;
        if(low==high-1) return Math.min(low, high);
        int min = Integer.MAX_VALUE;
        for(int i=low;i<=high;i++){
            min = Math.min(min, i + Math.max(recursive(low,i-1) , recursive(i+1,high)));
        }
        return min;
    }
}

//O(n^3) time and O(1) space
class Solution {
    public int getMoneyAmount(int n) {
        int[][] dp = new int[n+1][n+1];
        for(int i=0;i<n;i++){
            dp[i][i+1] = i;
        }
        for(int len=2;len<=n;len++){
            for(int low=1;low<=n-len;low++){
                int high = low + len;
                int min = Integer.MAX_VALUE;
                for(int i=low;i<=high;i++){
                    min = Math.min(min, i + Math.max(((i-1)>0)?dp[low][i-1]:0, (i+1<=n)?dp[i+1][high]:0));
                }
                dp[low][high] = min;
            }
        }
        return dp[1][n];
    }
}

//O(n^3) time and O(n^2) space
class Solution {
    public int getMoneyAmount(int n) {
        Integer[][] dp = new Integer[n+1][n+1];
        return helper(1, n, dp);
    }
    
    public int helper(int low, int high, Integer[][] dp) {
        if(low>=high) return 0;
        if(low==high-1) return low;
        if(dp[low][high]!=null) return dp[low][high];
        int min = Integer.MAX_VALUE;
        for(int i=low;i<=high;i++) {
            min = Math.min(min, i + Math.max(helper(low, i-1, dp), helper(i+1, high, dp)));
        }
        dp[low][high] = min;
        return min;
    }
    
}
