//O(n2) and O(n)
class Solution {
    public int maxProduct(String[] words) {
        //Sanity check
        if(words==null || words.length==0) return 0;
        int max = 0;
        int[] value = new int[words.length];
        for(int i=0;i<words.length;i++){
            String key = words[i];
            for(int j=0;j<key.length();j++){
                value[i] = value[i] | (1<<(key.charAt(j)-'a'));
            }
        }
        for(int i=0;i<words.length;i++){
            for(int j=i+1;j<words.length;j++){
                if((value[i]&value[j])==0)
                    max = Math.max(max, words[i].length()*words[j].length());
            }
        }
        return max;
    }
}


//O(n4) time and O(1) space
class Solution {  
    public int maxProduct(String[] words) {
        int max = 0;
        for(int i=0;i<words.length;i++){
            String w1 = words[i];
            int[] map = new int[26];
            updateMap(w1,map);
            for(int j=i+1;j<words.length;j++){
                String w2 = words[j];
                if(overlap(w2,map)) continue;
                max = Math.max(max, w1.length()*w2.length());
            }
        }
        return max;
    }
    
    public void updateMap(String word, int[] map){
        for(int i=0;i<26;i++){
            map[i] = 0;
        }
        for(int i=0;i<word.length();i++){
            map[word.charAt(i)-'a']++;
        }
    }
    
    public boolean overlap(String word, int[] map){
        for(int i=0;i<word.length();i++){
            if(map[word.charAt(i)-'a']!=0) return true;
        }
        return false;
    }
    
}
