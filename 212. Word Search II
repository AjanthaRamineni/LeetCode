public class Solution {
    
    public class TrieNode{
        TrieNode[] children = new TrieNode[26];
        String word;
        public TrieNode(){
            
        }
    }
    
    public TrieNode buildTrie(String[] words){
        TrieNode root = new TrieNode();
        for(String w:words){
            insert(root,w);
        }
        return root;
    }
    
    public void insert(TrieNode root, String w){
        TrieNode temp = root;
        for(int i=0;i<w.length();i++){
            char c = w.charAt(i);
            if(temp.children[c-'a']==null) temp.children[c-'a'] = new TrieNode();
            temp = temp.children[c-'a'];
        }
        temp.word = w;
    }
    
    public void helper(char[][] board, int i, int j, List<String> list, TrieNode root){
        if(board[i][j]=='#' || root.children[board[i][j]-'a']==null) return;
        root = root.children[board[i][j]-'a'];
        if(root.word!=null){
            list.add(root.word);
            root.word = null;
        }
        char c = board[i][j];
        board[i][j]='#';
        if(i>0) helper(board,i-1,j,list,root);
        if(j>0) helper(board,i,j-1,list,root);
        if(i<board.length-1) helper(board,i+1,j,list,root);
        if(j<board[0].length-1) helper(board,i,j+1,list,root);
        board[i][j] = c;
    }
    
    public List<String> findWords(char[][] board, String[] words) {
        List<String> list = new ArrayList();
        if(board==null || board.length==0 || words==null || words.length==0) return list;
        TrieNode root = buildTrie(words);
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                helper(board,i,j,list,root);
            }
        }
        return list;
    }
    
}
