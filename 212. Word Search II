class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> list = new ArrayList();
        if(board==null || board.length==0) return list;
        TrieNode root = buildTrie(words);
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                helper(board, i, j, root, list);
            }
        }
        return list;
    }
    public void helper(char[][] board, int i, int j, TrieNode root, List<String> list){
        char c = board[i][j];
        if(c=='#' || root.children[c-'a']==null) return;
        root = root.children[c-'a'];
        if(root.Word != null){
            list.add(root.Word);
            root.Word = null;
        }
        board[i][j] = '#';
        if (i > 0) helper(board, i - 1, j ,root, list); 
        if (j > 0) helper(board, i, j - 1, root, list);
        if (i < board.length - 1) helper(board, i + 1, j, root, list); 
        if (j < board[0].length - 1) helper(board, i, j + 1, root, list); 
        board[i][j] = c;
    }
    
    public TrieNode buildTrie(String[] words){
        TrieNode root = new TrieNode();
        for(String word:words){
            TrieNode temp = root;
            for(char c:word.toCharArray()){
                if(temp.children[c-'a']==null)
                    temp.children[c-'a'] = new TrieNode();
                temp = temp.children[c-'a'];
            }
            temp.Word = word;
        }
        return root;
    }
    
    class TrieNode{
        TrieNode[] children = new TrieNode[26];
        String Word;
    }
}
