class Solution {
    
    class TrieNode {
        TrieNode[] children;
        String word;
        public TrieNode() {
            children = new TrieNode[26];
            word = null;
        }
    }
    
    //O(n) time and space
    public void addWord(String word, TrieNode node) {
        for(char c:word.toCharArray()) {
            int index = c-'a';
            if(node.children[index]==null) node.children[index] = new TrieNode();
            node = node.children[index];
        }
        node.word = word;
    }
    
    public TrieNode buildTrie(String[] words) {
        TrieNode root = new TrieNode();
        for(String word:words) {
            addWord(word, root);
        }
        return root;
    }
    
    public void helper(char[][] board, int i, int j, TrieNode node, List<String> result) {
        if(board[i][j]=='#' || node.children[board[i][j]-'a']==null) return;
        char c = board[i][j];
        board[i][j] = '#';
        node = node.children[c-'a'];
        if(node.word!=null) {
            result.add(node.word);
            node.word = null;
        }
        if(i>0) helper(board, i-1, j, node, result);
        if(j>0) helper(board, i, j-1, node, result);
        if(i<board.length-1) helper(board, i+1, j, node, result);
        if(j<board[0].length-1) helper(board, i, j+1, node, result);
        board[i][j] = c;
    }
    
    //O(mn*k^26) time and O(k) space
    public List<String> findWords(char[][] board, String[] words) {
        List<String> result = new ArrayList();
        if(words==null || words.length==0) return result;
        TrieNode root = buildTrie(words);
        for(int i=0;i<board.length;i++) {
            for(int j=0;j<board[0].length;j++) {
                helper(board,i,j,root,result);
            }
        }
        return result;
    }
}
