//O(nS) time and O(S) space
class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        int sum = 0;
        for(int num:nums) sum+=num;
        if((sum+S)%2!=0 || sum<S) return 0;
        int target = (sum+S)/2;
        return subsetSum(nums, target);
    }
    
    //Given an array of +ve nums, return the number of ways to generate this target given we can use
    //one number only once
    public int subsetSum(int[] nums, int target) {
        int[] dp = new int[target+1];
        dp[0] = 1;
        for(int num:nums) {
            for(int i=target;i>=num;i--) {
                dp[i]+=dp[i-num];
            }
        }
        return dp[target];
    }
    
}
