//O(n) time and O(1) space
class Solution {
    public int strongPasswordChecker(String s) {
        int oneSeq = 0, twoSeq = 0, i = 2, missing = 3, n = s.length();
        for (char c : s.toCharArray()) {
            if (Character.isUpperCase(c)) {
                missing--;
                break;
            }
        }
        for (char c : s.toCharArray()) {
            if (Character.isLowerCase(c)) {
                missing--;
                break;
            }
        }
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                missing--;
                break;
            }
        }
        int changes = 0;
        while (i < n) {
            if (s.charAt(i) == s.charAt(i - 1) && s.charAt(i) == s.charAt(i - 2)) {
                int len = 2;
                while (i < n && s.charAt(i) == s.charAt(i - 1)) {
                    len++;
                    i++;
                }
                changes += len / 3; //replace the third character.
                if (len % 3 == 0) {
                    oneSeq++;
                }
                else if (len % 3 == 1) {
                    twoSeq++;
                }
            }
            else {
                i++;
            }
        }
        if (n < 6) {
            return Math.max(6 - n, missing);
        }
        if (n <= 20) {
            return Math.max(changes, missing);
        }
        int deletes = n - 20;
        changes -= Math.min(oneSeq, deletes); //matches mod 0.
        changes -= Math.min(Math.max(deletes - oneSeq, 0), twoSeq * 2) / 2; //matches mod 1.
        changes -= Math.max(deletes - oneSeq - twoSeq * 2, 0) / 3; //matches mod 2.
        return deletes + Math.max(changes, missing);
    }
}
