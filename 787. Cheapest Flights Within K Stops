//O(E+NlogN) time and O(V+E) space
class Solution {
    Map<Integer, Map<Integer, Integer>> adjlist;
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        construct(flights, n);
        return dijkstras(src, dst, K);
    }
    
    public void construct(int[][] flights, int n) {
        adjlist = new HashMap();
        for(int i=0;i<n;i++) {
            adjlist.put(i, new HashMap());
        }
        for(int[] flight:flights) {
            int u = flight[0], v = flight[1], w = flight[2];
            adjlist.get(u).put(v,w);
        }
    }
    
    public int dijkstras(int s, int d, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue(1, new Comparator<int[]>(){
            public int compare(int[] a, int[] b) {
                return a[1]-b[1];
            }
        });
        pq.offer(new int[]{s, 0, 0});
        while(!pq.isEmpty()) {
            int[] cell = pq.poll();
            int u = cell[0], distance = cell[1], stops = cell[2];
            if(u==d) return distance;
            if(stops<=k) {
                Map<Integer, Integer> map = adjlist.get(u);
                for(int v:map.keySet()) {
                    pq.offer(new int[]{v, distance+map.get(v), stops+1});
                }
            }
        }
        return -1;
    }
}
