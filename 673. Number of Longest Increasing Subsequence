//O(n2) time and O(n) space
class Solution {
    public int findNumberOfLIS(int[] nums) {
        if(nums==null || nums.length==0) return 0;
        int n = nums.length;
        int[] dp = new int[n];
        int[] counts = new int[n];
        Arrays.fill(counts,1);
        Arrays.fill(dp,1);
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[i]>nums[j]){
                    if(dp[i]<(1+dp[j])){
                        dp[i] = dp[j] + 1;
                        counts[i] = counts[j];
                    }
                    else if(dp[i]==1+dp[j]){
                        counts[i]+=counts[j];
                    }
                }
            }
        }
        int max = 0;
        for(int d:dp){
            max = Math.max(d,max);
        }
        int result = 0;
        for(int i=0;i<dp.length;i++){
            if(dp[i]==max){
                result+=counts[i];
            }
        }
        return result;
    }
}
