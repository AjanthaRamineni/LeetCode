public class WordDictionary {
    
    public class TrieNode {
        TrieNode[] children = new TrieNode[26];
        boolean isWord;
        public TrieNode(){
            
        }
    }
    
    TrieNode root = new TrieNode();
    
    public void addWord(String word) {
        TrieNode temp = root;
        for(int i=0;i<word.length();i++){
            char ch = word.charAt(i);
            if(temp.children[ch-'a']==null) temp.children[ch-'a'] = new TrieNode();
            temp = temp.children[ch-'a'];
        }
        temp.isWord = true;
    }

    public boolean search(String word) {
        return search(root,word,0);
    }
    
    public boolean search(TrieNode root, String word, int index){
        if(index==word.length()) return root.isWord;
        else if(word.charAt(index)=='.'){
            for(int i=0;i<26;i++){
                if(root.children[i]!=null && search(root.children[i],word,index+1)) return true;
            }
            return false;
        }
        else{
            if(root.children[word.charAt(index)-'a']==null) return false;
            return search(root.children[word.charAt(index)-'a'],word,index+1);
        }
    }
}


//addWord - O(m) - m is the length of the new word
//search - O(n) - n is the total number of characters in all words
