class Solution {
    class Tuple{
        int x;
        int y;
        int sum;
        public Tuple(int x, int y, int sum){
            this.x = x;
            this.y = y;
            this.sum = sum;
        }
    }
    
    //O(klogn) time and O(n) space
    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<int[]> list = new ArrayList();
        if(nums1.length==0 || nums2.length==0) return list;
        PriorityQueue<Tuple> pq = new PriorityQueue<Tuple>(new Comparator<Tuple>(){
           public int compare(Tuple a, Tuple b){
               return a.sum - b.sum;
           } 
        });
        for(int i=0;i<nums2.length;i++){
            pq.offer(new Tuple(0, i, nums1[0]+nums2[i]));
        }
        while(!pq.isEmpty()){
            Tuple t = pq.poll();
            list.add(new int[]{nums1[t.x], nums2[t.y]});
            if(list.size()==k) return list;
            if(t.x==nums1.length-1) continue;
            pq.offer(new Tuple(t.x+1, t.y, nums1[t.x+1]+nums2[t.y]));
        }
        return list;
    }
}
