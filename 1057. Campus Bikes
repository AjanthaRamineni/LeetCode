//O(mn*logm(mn)) time and O(mn) space
class Solution {
    
    class Cell {
        int bike;
        int worker;
        int distance;
        public Cell(int bike, int worker, int distance) {
            this.bike = bike;
            this.worker = worker;
            this.distance = distance;
        }
    }
    
    public int[] assignBikes(int[][] workers, int[][] bikes) {
        PriorityQueue<Cell> pq = new PriorityQueue(workers.length, new Comparator<Cell>(){
           public int compare(Cell a, Cell b) {
               if(a.distance == b.distance) {
                   if(a.worker==b.worker) {
                       return a.bike - b.bike;
                   }
                   else {
                       return a.worker - b.worker;
                   }
               }
               else {
                   return a.distance - b.distance;
               }
           }
        });
        Set<Integer> assignedBikes = new HashSet();
        int[] result = new int[workers.length];
        Arrays.fill(result, -1);
        for(int i=0;i<workers.length;i++){
            for(int j=0;j<bikes.length;j++){
                int distance = Math.abs(workers[i][0] - bikes[j][0]) + Math.abs(workers[i][1]-bikes[j][1]);
                pq.offer(new Cell(j, i, distance));
            }
        }
        while(assignedBikes.size()<workers.length){
            Cell cell = pq.poll();
            int b = cell.bike, w = cell.worker;
            if(!assignedBikes.contains(b) && result[w]==-1) {
                result[w] = b;
                assignedBikes.add(b);
            }
        }
        return result;
    }
    
}
