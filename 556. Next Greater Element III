//O(n) time and O(1) space
class Solution {
    public int nextGreaterElement(int num) {
        char[] ch = String.valueOf(num).toCharArray();
        int n = ch.length;
        int i = n-2;
        while(i>=0) {
            if(ch[i]<ch[i+1]) break;
            i--;
        }
        if(i<0) return -1;
        int j = n-1;
        while(j>=0 && ch[j]<=ch[i]) j--;
        swap(ch,i,j);
        reverse(ch, i+1);
        //Edge Case
        Long result = Long.parseLong(String.valueOf(ch));
        if(result>Integer.MAX_VALUE) return -1;
        return Integer.parseInt(String.valueOf(ch));
    }
    
    public void swap(char[] ch, int i, int j) {
        char c = ch[i];
        ch[i] = ch[j];
        ch[j] = c;
    }
    
    public void reverse(char[] ch, int low) {
        int high = ch.length-1;
        while(low<high) {
            char c = ch[low];
            ch[low++] = ch[high];
            ch[high--] = c;
        }
    }
    
}
