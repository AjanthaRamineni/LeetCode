class MyCircularQueue {

    class DLNode {
        
        int val;
        DLNode pre, post;
        
        public DLNode() {
            
        }
        
        public DLNode(int val) {
            this.val = val;
        }
        
    }
    
    int size;
    int k;
    DLNode head;
    DLNode tail;
    
    public MyCircularQueue(int k) {
        this.k = k;
        this.size = 0;
        head = new DLNode();
        tail = new DLNode();
        tail.pre = head;
        head.post = tail;
        head.pre = tail;
        tail.post = head;
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
        if(size==k) return false;
        size++;
        DLNode node = new DLNode(value);
        node.post = tail;
        node.pre = tail.pre;
        tail.pre.post = node;
        tail.pre = node;
        return true;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
        if(size==0) return false;
        size--;
        DLNode node = head.post;
        DLNode pre = node.pre;
        DLNode post = node.post;
        pre.post = post;
        post.pre = pre;
        return true;
    }
    
    /** Get the front item from the queue. */
    public int Front() {
        if(size==0) return -1;
        return head.post.val;
    }
    
    /** Get the last item from the queue. */
    public int Rear() {
        if(size==0) return -1;
        return tail.pre.val;
    }
    
    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
        return (size==0);
    }
    
    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
        return (size==k);
    }
}
