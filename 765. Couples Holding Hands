//O(n) time and space
class Solution {
    public int minSwapsCouples(int[] row) {
        if(row==null || row.length==0) return 0;
        int n = row.length/2;
        DisjointSet ds = new DisjointSet(n); 
        for(int i=0;i<n;i++) {
            int a = row[2*i];
            int b = row[2*i+1];
            ds.union(a/2, b/2);
        }
        return n-ds.count;
    }
    
    class DisjointSet {
        int[] parent, size;
        int count;
        public DisjointSet(int n) {
            parent = new int[n];
            size = new int[n];
            for(int i=0;i<n;i++) {
                parent[i] = i;
            }
            Arrays.fill(size, 1);
            count = n;
        }
        
        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if(rootX!=rootY) {
                parent[rootX] = rootY;
                size[rootY]+=size[rootX];
                count--;
            }
        }
        
        public int find(int x) {
            if(x==parent[x]) return x;
            parent[x] = find(parent[x]);
            return parent[x];
        }
        
    }
    
}
