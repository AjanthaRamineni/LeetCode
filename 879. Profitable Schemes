//O(GPn) time and space
class Solution {
    static final int MOD = (int)1e9 + 7;
    Integer[][][] memo;
    public int profitableSchemes(int G, int P, int[] group, int[] profit) {
        memo = new Integer[group.length][G+1][P+1];
        return helper(G, P, group, profit, 0);
    }
    
    public int helper(int G, int P, int[] group, int[] profit, int index) {
        if(index==group.length) return 0;
        P = Math.max(P, 0);
        if(memo[index][G][P]!=null) return memo[index][G][P];
        int res = 0;
        if(G>=group[index]) {
            if(P-profit[index]<=0) res++;
            res+=helper(G-group[index], P-profit[index], group, profit, index+1); 
            res%=MOD;
        }
        res+=helper(G, P, group, profit, index+1);
        res%=MOD;
        memo[index][G][P] =res;
        return res;
    }
    
}
