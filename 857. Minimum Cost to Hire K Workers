class Solution {

    class WageRatio {
        int quality;
        double wRatio;
        WageRatio(int quality, double wRatio)
        {
            this.quality = quality;
            this.wRatio = wRatio;
        }
    }
    
    public double mincostToHireWorkers(int[] quality, int[] wage, int K) {
        double res = Double.MAX_VALUE;
        int n = wage.length;
        WageRatio[] wageRatio = new WageRatio[n];
        for(int i=0; i<n; i++)
        {
            int qual = quality[i];
            double wRatio = (double)wage[i]/(double)quality[i];
            wageRatio[i] = new WageRatio(qual, wRatio);
        }
        
        Arrays.sort(wageRatio, (x,y) -> Double.compare(x.wRatio, y.wRatio));
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((x,y) -> (y-x));
        
        int sumq = 0;
        for(WageRatio wRatio: wageRatio)
        {
            pq.offer(wRatio.quality);
            sumq += wRatio.quality;
            if(pq.size() > K)
            {
                sumq -= pq.poll();
            }
            if(pq.size() == K)
            {
                res = Math.min(res, sumq*wRatio.wRatio);
            }
        }
        
        return res;
    }
}
