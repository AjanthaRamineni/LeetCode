//O(nlogk) time and O(n) space
class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        List<String> result = new ArrayList();
        if(words==null || words.length==0) return result;
        int n = words.length;
        List<String>[] buckets = new List[n+1];
        Map<String, Integer> map = new HashMap();
        for(String word:words){
            map.put(word, map.getOrDefault(word,0)+1);
        }
        for(String key:map.keySet()){
            int value = map.get(key);
            if(buckets[value]==null) buckets[value] = new ArrayList();
            buckets[value].add(key);
        }
        for(int i=0;i<buckets.length;i++){
            if(buckets[i]==null) continue;
            Collections.sort(buckets[i]);
        }
        for(int i=n;i>=0;i--){
            if(buckets[i]!=null){
                for(String s:buckets[i]){
                    result.add(s);
                    if(result.size()==k) return result;
                }
            }
        }
        return result;
    }
}
