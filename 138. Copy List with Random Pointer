/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;
    public Node random;

    public Node() {}

    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
//O(n) time and O(1) space
class Solution {
    public Node copyRandomList(Node head) {
        Node iter = head;
        while(iter!=null){
            Node next = iter.next;
            Node newNode = new Node(iter.val);
            iter.next = newNode;
            newNode.next = next;
            iter = next;
        }
        iter = head;
        while(iter!=null){
            if(iter.random!=null){
                iter.next.random = iter.random.next;
            }
            iter = iter.next.next;
        }
        iter = head;
        Node dummy = new Node(0);
        Node cur = dummy;
        while(iter!=null){
            Node next = iter.next.next;
            cur.next = iter.next;
            cur = cur.next;
            iter.next = next;
            iter = next;
        }
        return dummy.next;
    }
}
