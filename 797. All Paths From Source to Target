//Exponential time and space complexity
class Solution {
    Map<Integer, List<Integer>> adjlist;
    List<List<Integer>> result;
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        construct(graph);
        dfs(0, graph.length-1, new ArrayList());
        return result;
    }
    
    public void construct(int[][] graph){
        adjlist = new HashMap();
        result = new ArrayList();
        int source = 0;
        for(int[] g:graph){
            adjlist.put(source, new ArrayList());
            for(int neighbor:g){
                adjlist.get(source).add(neighbor);
            }
            source++;
        }
    }
    
    public void dfs(int source, int destination, List<Integer> list){
        if(list.contains(source)) return;
        if(source==destination){
            list.add(source);
            result.add(new ArrayList(list));
            return;
        }
        list.add(source);
        for(Integer neighbor:adjlist.get(source)){
            dfs(neighbor, destination, list);
            list.remove(neighbor);
        }
    }
    
}
