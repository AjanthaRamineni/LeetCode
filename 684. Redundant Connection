//O(n2) time and O(n) space
class Solution {
    Set<Integer> set = new HashSet();
    public int[] findRedundantConnection(int[][] edges) {
        List<Integer>[] adjlist = new ArrayList[1001];
        for(int i=0;i<adjlist.length;i++)
            adjlist[i] = new ArrayList();
        for(int[] edge:edges){
            set.clear();
            if(dfs(adjlist, edge[0],edge[1]))
                return edge;
            adjlist[edge[0]].add(edge[1]);
            adjlist[edge[1]].add(edge[0]);
        }
        return new int[0];
    }
    public boolean dfs(List<Integer>[] adjlist, int s, int d){
        if(!set.contains(s)){
            set.add(s);
            if(s==d) return true;
            for(int neighbors: adjlist[s]){
                if(dfs(adjlist, neighbors, d)) return true;
            }
        }
        return false;
    }
}

class Solution {
    
    class DisjointSet {
        int[] parent;
        int[] rank;
        int size;
        public DisjointSet(int n) {
            parent = new int[n];
            rank = new int[n];
            for(int i=0;i<n;i++) {
                rank[i] = 1;
                parent[i] = i;
            }
            size = n;
        }
        
        //O(1) amortized
        public boolean union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA==parentB) return false;
            if(rank[parentA]>rank[parentB]) {
                parent[parentB] = parentA;
                rank[parentA]+=rank[parentB];
            }
            else {
                parent[parentA] = parentB;
                rank[parentB]+=rank[parentA];
            }
            size--;
            return true;
        }
        
        //O(1) amortized
        public int find(int a) {
            if(a==parent[a]) return a;
            parent[a] = find(parent[a]);
            return parent[a];
        }
        
    }
    
    //O(n) time and space
    public int[] findRedundantConnection(int[][] edges) {
        if(edges==null || edges.length==0) return new int[2];
        int n = edges.length;
        int[] result = new int[2];
        DisjointSet ds = new DisjointSet(n+1);
        for(int[] edge:edges) {
            int u = edge[0], v = edge[1];
            if(!ds.union(u, v)) {
                result = edge;
            }
        }
        return result;
    }
}
