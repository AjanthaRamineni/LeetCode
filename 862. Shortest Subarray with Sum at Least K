//O(n) time and space
class Solution {
    public int shortestSubarray(int[] A, int K) {
        if(A==null || A.length==0) return -1;
        int n = A.length, min = n+1;
        Deque<Integer> dq = new ArrayDeque();
        int[] cumsum = new int[n+1];
        for(int i=1;i<=n;i++) cumsum[i] = cumsum[i-1] + A[i-1];
        for(int i=0;i<=n;i++) {
            while(!dq.isEmpty() && cumsum[i]-cumsum[dq.peek()]>=K) {
                min = Math.min(min, i-dq.poll());
            }
            while(!dq.isEmpty() && cumsum[i]<=cumsum[dq.peekLast()]) {
                dq.pollLast();
            }
            dq.offer(i);
        }
        return (min>n)?-1:min;
    }
}
