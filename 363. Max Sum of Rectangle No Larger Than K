//O(n^2*mlogm) time and O(m) space
class Solution {
    public int maxSumSubmatrix(int[][] matrix, int K) {
        if(matrix==null || matrix.length==0) return 0;
        int m = matrix.length, n = matrix[0].length, max = Integer.MIN_VALUE;
        for(int i=0;i<n;i++) {
            int[] array = new int[m];
            for(int j=i;j<n;j++) {
                for(int k=0;k<m;k++) {
                    array[k]+=matrix[k][j];
                }
                max = Math.max(max, helper(array, K));
            }
        }
        return max;
    }
    
    //Given an array, find the largest substring sum no larger than k
    //O(nlogn) time and O(n) space
    public int helper(int[] nums, int k) {
        TreeSet<Integer> set = new TreeSet();
        set.add(0);
        int sum = 0, max = Integer.MIN_VALUE;
        for(int num:nums) {
            sum+=num;
            Integer ceiling = set.ceiling(sum-k);
            if(ceiling!=null) max = Math.max(max, sum-ceiling);
            set.add(sum);
        }
        return max;
    }
    
}
