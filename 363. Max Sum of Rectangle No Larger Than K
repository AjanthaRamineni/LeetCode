class Solution {
    public int maxSumSubmatrix(int[][] matrix, int k) {
        if(matrix==null||matrix.length==0||matrix[0].length==0) return 0;
        int row = matrix.length;
        int col = matrix[0].length;
        int maxSum = Integer.MIN_VALUE;
        for(int left=0;left<col;left++)
        {
            int[] array = new int[row];
            for(int right = left;right<col;right++){
                for(int i=0;i<row;i++){
                    array[i] = array[i] + matrix[i][right];
                }
                TreeSet<Integer> set = new TreeSet();
                set.add(0);
                int cursum = 0;
                for(int num: array){
                    cursum = cursum + num; 
                    Integer temp = set.ceiling(cursum - k);
                    if(temp!=null) maxSum = Math.max(maxSum, cursum-temp);
                    set.add(cursum);
                }
            }
        }
        return maxSum;
    }
}
