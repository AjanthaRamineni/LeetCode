//O(n) time and space
class Solution {
    
    class DisjointSet {
        int[] parent;
        int[] rank;
        public DisjointSet(int n) {
            parent = new int[n];
            rank = new int[n];
            for(int i=0;i<n;i++) {
                rank[i] = 1;
                parent[i] = i;
            }
        }
        
        //O(1) amortized
        public boolean union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA==parentB) return false;
            if(rank[parentA]>rank[parentB]) {
                parent[parentB] = parentA;
                rank[parentA]+=rank[parentB];
            }
            else {
                parent[parentA] = parentB;
                rank[parentB]+=rank[parentA];
            }
            return true;
        }
        
        //O(1) amortized
        public int find(int a) {
            if(a==parent[a]) return a;
            parent[a] = find(parent[a]);
            return parent[a];
        }
        
    }

    
    public int[] findRedundantDirectedConnection(int[][] edges) {
        if(edges==null || edges.length==0) return new int[0];
        Map<Integer, Integer> map = new HashMap();
        int n = edges.length;
        int nodeWithTwoIncomingEdges = -1;
        for(int[] edge:edges) {
            int u = edge[0], v = edge[1];
            map.put(v, map.getOrDefault(v,0)+1);
            if(map.get(v)==2) nodeWithTwoIncomingEdges = v;
        }
        if(nodeWithTwoIncomingEdges==-1) {
            return findRedundantConnection(edges, -1);
        }
        else {
            for(int i=edges.length-1;i>=0;i--) {
                if(edges[i][1]==nodeWithTwoIncomingEdges) {
                    int[] res = findRedundantConnection(edges, i);
                    if(res==null) return edges[i];
                }
            }
        }
        return null;
    }
    
    public int[] findRedundantConnection(int[][] edges, int skip) {
        DisjointSet ds = new DisjointSet(edges.length+1);
        for(int i=0;i<edges.length;i++){
            if(i==skip) continue;
            if(!ds.union(edges[i][0], edges[i][1])) return edges[i];
        } 
        
        return null;
    }
    
}
