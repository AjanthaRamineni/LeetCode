//O((mn)^2) time and O(mn) space
class Solution {
    int[][] dirs = new int[][]{{0,1},{1,0},{-1,0},{0,-1}};
    public int shortestDistance(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m = grid.length, n = grid[0].length;
        int count = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1) count++;
            }
        }
        int min = Integer.MAX_VALUE;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                    min = Math.min(min, bfs(grid,i,j,m,n, count));
                }
            }
        }
        return (min==Integer.MAX_VALUE)?-1:min;
    }
    
    public int bfs(int[][] grid, int i, int j, int m, int n, int count){
        Queue<int[]> queue = new LinkedList();
        queue.offer(new int[]{i,j});
        boolean[][] visited = new boolean[m][n];
        visited[i][j] = true;
        int buildings = 0, level = 1, sum = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int k=0;k<size;k++){
                int[] position = queue.poll();
                for(int[] dir:dirs){
                    int x = position[0] + dir[0];
                    int y = position[1] + dir[1];
                    if(x<0 || y<0 || (x>=m) || (y>=n)) continue;
                    if(visited[x][y] || grid[x][y]==2) continue;
                    if(grid[x][y]==0) queue.offer(new int[]{x,y});
                    visited[x][y] = true;
                    if(grid[x][y]==1) { buildings++; sum+=level; }
                    if(buildings==count) return sum;
                }
            }
            level++;
        }
        return (buildings==count)?sum:Integer.MAX_VALUE;
    }
    
}
