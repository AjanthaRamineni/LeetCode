public class Codec {
    
    //O(n) time and space
    public String serialize(TreeNode root) {
        //Sanity Check
        if(root==null) return "";
        Queue<TreeNode> queue = new LinkedList();
        queue.offer(root);
        StringBuffer sb = new StringBuffer();
        while(!queue.isEmpty()){
            TreeNode temp = queue.poll();
            if(temp==null){
                sb.append("null,");
                continue;
            }
            sb.append(temp.val+",");
            queue.offer(temp.left);
            queue.offer(temp.right);
        }
        return sb.toString();
    }

    //O(n) time and O(1) space
    public TreeNode deserialize(String data) {
        if(data.equals("")) return null;
        String[] nodes = data.split(",");
        System.out.println(nodes[0]);
        TreeNode root = new TreeNode(Integer.parseInt(nodes[0]));
        Queue<TreeNode> queue = new LinkedList();
        queue.offer(root);
        for(int i=1;i<nodes.length;i++){
            TreeNode parent = queue.poll();
            if(!nodes[i].equals("null")){
                TreeNode left = new TreeNode(Integer.parseInt(nodes[i]));
                parent.left = left;
                queue.offer(left);
            }
            if(!nodes[++i].equals("null")){
                TreeNode right = new TreeNode(Integer.parseInt(nodes[i]));
                parent.right = right;
                queue.offer(right);
            }
        }
        return root;
    }
}
