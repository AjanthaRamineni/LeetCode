//O(n^2) time and O(1) space
class Solution {
    public int longestMountain(int[] A) {
        if(A==null || A.length<3) return 0;
        int n = A.length;
        int max = 0;
        for(int i=0;i<n-2;i++){
            if(A[i+1]<=A[i]) continue;
            int j = i+1;
            int count = 0;
            while(j<n-1 && A[j+1]>A[j]) j++;
            if((j==n-1) || (A[j+1]==A[j])) continue;
            while(j<n-1 && A[j+1]<A[j]) j++;
            max = Math.max(max, j-i+1);
        }
        return max;
    }
}
