//O(n) time and space
class Solution {
    public int longestMountain(int[] A) {
        if(A==null || A.length<3) return 0;
        int n = A.length, max = 0;
        int[] up = new int[A.length];
        int[] down = new int[A.length];
        for(int i=1;i<n;i++){
            if(A[i]>A[i-1]){
                up[i] = 1+up[i-1];
            }
        }
        for(int i=n-2;i>=0;i--){
            if(A[i]>A[i+1]){
                down[i] = 1+down[i+1];
            }
        }
        for(int i=0;i<n;i++){
            if(up[i]>0 && down[i]>0){
                max = Math.max(max, 1+up[i]+down[i]);
            }
        }
        return max;
    }
}

//O(n) time and O(1) space
class Solution {
    public int longestMountain(int[] A) {
        //I'll have two variables instead of two arrays
        //Whenever consecutive elements are equal, I'll reset left and right to 0
        //If we saw downward trend(indicated by down>0) and we saw upward trend(curElement>prevElement), I'll reset left and right to 0
        int res = 0, up = 0, down = 0;
        for (int i = 1; i < A.length; ++i) {
            if (down > 0 && A[i - 1] < A[i] || A[i - 1] == A[i]) up = down = 0;
            if (A[i - 1] < A[i]) up++;
            if (A[i - 1] > A[i]) down++;
            if (up > 0 && down > 0 && up + down + 1 > res) res = up + down + 1;
        }
        return res;
    }
}
