//O(n) time and O(1) space
class Solution {
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode rl1 = reverse(l1);
        ListNode rl2 = reverse(l2);
        return reverse(addTwoNumbers2(rl1, rl2));
    }
    
    public ListNode addTwoNumbers2(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode iter = dummy;
        ListNode h1 = l1, h2 = l2;
        int carry = 0;
        while(l1!=null || l2!=null || carry!=0) {
            int a = (l1==null)?0:l1.val;
            int b = (l2==null)?0:l2.val;
            int sum = (a+b+carry)%10;
            carry = (a+b+carry)/10;
            iter.next = new ListNode(sum);
            iter = iter.next;
            l1 = (l1==null)?null:l1.next;
            l2 = (l2==null)?null:l2.next;
        }
        return dummy.next;
    }
    
    public ListNode reverse(ListNode head) {
        if(head==null || head==null) return head;
        ListNode prev = null, cur = head;
        while(cur!=null) {
            ListNode next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }
        return prev;
    }
    
}
