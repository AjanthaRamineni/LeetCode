class Solution {
    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
        Map<List<Integer>, Integer> map = new HashMap();
        return helper(price, special, needs, map);
    }
    
    public int helper(List<Integer> price, List<List<Integer>> special, List<Integer> needs, Map<List<Integer>, Integer> map) {
        if(map.containsKey(needs)) return map.get(needs);
        int cost = bruteforce(price, needs);
        for(List<Integer> s:special){
            boolean possible = true;
            for(int i=0;i<s.size()-1;i++){
                if(needs.get(i)-s.get(i)<0) possible = false;
            }
            if(possible){
                cost = Math.min(cost, s.get(s.size()-1)+helper(price, special, modify(needs, s), map));
            }
        }
        map.put(needs, cost);
        return cost;
    }
    
    public int bruteforce(List<Integer> price, List<Integer> needs) {
        int sum = 0;
        for(int i=0;i<price.size();i++){
            sum+=(price.get(i)*needs.get(i));
        }
        return sum;
    }
    
    public List<Integer> modify(List<Integer> needs, List<Integer> s){
        List<Integer> list = new ArrayList();
        for(int i=0;i<needs.size();i++){
            list.add(needs.get(i)-s.get(i));
        }
        return list;
    }
}
