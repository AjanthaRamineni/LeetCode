//O(n) time and space
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null) return 0;
        Queue<TreeNode> q = new LinkedList();
        Queue<Integer> count = new LinkedList();
        q.offer(root);
        count.offer(0);
        int max = 1;
        while(!q.isEmpty()){
            int level = q.size();
            int left = 0, right = 0;
            for(int i=0;i<level;i++){
                TreeNode temp = q.poll();
                int index = count.poll();
                if(i==0) left = index;
                if(i==level-1) right = index;
                if(temp.left!=null){
                    q.offer(temp.left);
                    count.offer(2*index);
                }
                if(temp.right!=null){
                    q.offer(temp.right);
                    count.offer(2*index+1);
                }
            }
            max = Math.max(max,right-left+1);
        }
        return max;
    }
}
