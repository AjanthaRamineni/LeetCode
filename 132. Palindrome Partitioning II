//O(n^2) time and space
class Solution {
    public int minCut(String s) {
        if(s==null || s.length()==0) return 0;
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        for(int i=n-1;i>=0;i--){
            for(int j=i;j<n;j++){
                dp[i][j] = s.charAt(i)==s.charAt(j) && (j-i<3 || dp[i+1][j-1]);
            }
        }
        int[] mincut = new int[n];
        for(int i=0;i<n;i++){
            if(dp[0][i]){
                continue;
            }else{
                int min = Integer.MAX_VALUE;
                for(int j=0;j<i;j++){
                    if(dp[j+1][i]){
                        min = Math.min(min, 1+mincut[j]);
                    }
                }
                mincut[i] = min;
            }
        }
        return mincut[n-1];
    }
}
