//O(n) time and space
class Solution {
    public List<List<String>> findDuplicate(String[] paths) {
        List<List<String>> result = new ArrayList();
        if(paths==null || paths.length==0) return result;
        Map<String, List<String>> map = new HashMap();
        for(String path:paths) {
            String[] tokens = path.split(" ");
            String dir = tokens[0];
            for(int i=1;i<tokens.length;i++) {
                String[] t = tokens[i].split("\\(");
                String newDir = dir +"/"+t[0];
                map.putIfAbsent(t[1], new ArrayList());
                map.get(t[1]).add(newDir);
            }
        }
        for(String key:map.keySet()) {
            if(map.get(key).size()==1) continue;
            result.add(map.get(key));
        }
        return result;
    }
}
