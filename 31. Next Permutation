//O(n) time and O(1) space
class Solution {
    public void nextPermutation(int[] nums) {
        if(nums==null || nums.length<2) return;
        int n = nums.length;
        //Step 1: Find the first index from back which is less than next element
        int i = n-2;
        while(i>=0 && nums[i]>=nums[i+1]) i--;
        if(i>=0) {
            //Step 2: Find the first index from back which is strictly greater than element
            int j = n-1;
            while(j>=0 && nums[j]<=nums[i]) j--;
            //Step 3: Swap and Reverse
            swap(nums, i, j);
        }
        reverse(nums,i+1);
    }
    
    private void reverse(int[] nums, int start) {
        int i = start, j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
}
