/**
 * // This is the BinaryMatrix's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface BinaryMatrix {
 *     public int get(int row, int col) {}
 *     public List<Integer> dimensions {}
 * };
 */

//O(MlogN) time and O(1) space
class Solution {
    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {
        List<Integer> dimensions = binaryMatrix.dimensions();
        int m = dimensions.get(0), n = dimensions.get(1);
        int low = 0, high = n-1, res = -1;
        while(low<=high) {
            int mid = low + (high-low)/2;
            if(!valid(binaryMatrix, mid, m)) {
                low = mid+1;
            }
            else {
                high = mid-1;
                res = mid;
            }
        }
        return res;
    }
    
    public boolean valid(BinaryMatrix binaryMatrix, int j, int m) {
        for(int i=0;i<m;i++) {
            if(binaryMatrix.get(i, j)==1) return true;
        }
        return false;
    }
    
}
