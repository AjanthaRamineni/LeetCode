//O(n*logn) time and O(n) space
class Solution {
    public List<List<Integer>> getSkyline(int[][] buildings) {
        List<List<Integer>> result = new ArrayList();
        if(buildings==null || buildings.length==0) return result;
        List<int[]> heights = new ArrayList();
        for(int[] building:buildings) {
            int l = building[0], r = building[1], h = building[2];
            heights.add(new int[]{l,-h});
            heights.add(new int[]{r,h});
        }
        Collections.sort(heights, new Comparator<int[]>(){
            public int compare(int[] a, int[] b) {
                if(a[0]==b[0])
                    return a[1]-b[1];
                else
                    return a[0]-b[0];
            }
        });
        TreeMap<Integer, Integer> map = new TreeMap(Collections.reverseOrder());
        int prev = 0;
        map.put(0, 1);
        for(int[] h:heights) {
            if(h[1]<0) { 
                map.put(-h[1], map.getOrDefault(-h[1],0)+1);
            }
            else { 
                map.put(h[1], map.get(h[1])-1);
                if(map.get(h[1])==0) map.remove(h[1]);
            }
            int cur = map.firstKey();
            if(cur!=prev) {
                List<Integer> list = new ArrayList();
                list.add(h[0]);list.add(cur);
                result.add(list);
                prev = cur;
            }
        }
        return result;
    }
}
