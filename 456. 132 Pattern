//O(n2) time and O(1) space
class Solution {
    public boolean find132pattern(int[] nums) {
        //Sanity Check
        if(nums==null || nums.length<3) return false;
        int n = nums.length;
        int min = Integer.MAX_VALUE;
        for(int j = 0;j<n;j++){
            min = Math.min(nums[j],min);
            if(min==nums[j]) continue;
            for(int k = n-1;k>j;k--){
                if(min<nums[k]&&nums[k]<nums[j]) return true;
            }
        }
        return false;
    }
}


//O(n) time and space
class Solution {
    public boolean find132pattern(int[] nums) {
        //Sanity check
        if(nums==null || nums.length<3) return false;
        Stack<Integer> stack = new Stack();
        Integer s3 = null;
        for(int i=nums.length-1;i>=0;i--){
            int num = nums[i];
            if(s3!=null && (num<s3)) return true;
            while(!stack.isEmpty() && num>stack.peek()){
                s3 = stack.pop();
            }
            stack.push(num);
        }
        return false;
    }
}
