//O(n) and O(n) solution
public class Solution {
    public int largestRectangleArea(int[] height) {
        int len = height.length;
        Stack<Integer> s = new Stack<Integer>();
        int maxArea = 0;
        for(int i = 0; i <= len; i++){
            int h = (i == len ? 0 : height[i]);
            if(s.isEmpty() || h >= height[s.peek()]){
                s.push(i);
            }else{
                int tp = s.pop();
                maxArea = Math.max(maxArea, height[tp] * (s.isEmpty() ? i : i - 1 - s.peek()));
                i--;
            }
        }
        return maxArea;
    }
}

//O(n2) time and O(1) space
class Solution {
    public int largestRectangleArea(int[] nums) {
        int max = 0;
        for(int i=0;i<nums.length;i++){
            int min = nums[i];
            max = Math.max(max,min);
            for(int j=i+1;j<nums.length;j++){
                min = Math.min(min, nums[j]);
                max = Math.max(max, (j-i+1)*min);
            }
        }
        return max;
    }
}
