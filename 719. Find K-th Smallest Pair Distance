//O(n*(log(max-min))) time and O(1) space
class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        if(nums==null || nums.length==0) return 0;
        int n = nums.length;
        Arrays.sort(nums);
        int low = nums[1] - nums[0];
        for(int i=1;i<n;i++) {
            low = Math.min(low, nums[i]-nums[i-1]);
        }
        int high = nums[n-1]-nums[0];
        while(low<high) {
            int mid = low + (high-low)/2;
            if(countPairs(nums, mid)<k) {
                low = mid+1;
            }
            else {
                high = mid;
            }
        }
        return low;
    }
    
    //O(n) time and O(1) space
    public int countPairs(int[] nums, int mid) {
        int n = nums.length, res = 0, left = 0, right =1;
        while(right<n) {
            if(nums[right]-nums[left]<=mid) {
                res+=right-left;
                right++;
            }
            else {
                left++;
            }
        }
        return res;
    }
    
}
