//O(n) time and space
class Solution {
    public int deleteAndEarn(int[] nums) {
        //Sanity check
        if(nums==null || nums.length==0) return 0;
        int[] buckets = new int[10001];
        for(int i=0;i<nums.length;i++){
            int num = nums[i];
            buckets[num] += num;
        }
        return rob(buckets);
    }
    public int rob(int[] nums) {
        if(nums==null || nums.length==0) return 0;
        if(nums.length==1) return nums[0];
        if(nums.length==2) return Math.max(nums[0],nums[1]);
        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for(int i=2;i<nums.length;i++){
            dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i]);
        }
        return dp[n-1];
    }
}
