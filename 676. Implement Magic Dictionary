class MagicDictionary {
    Map<String, Integer> map;
    Set<String> set;
    public MagicDictionary() {
        map = new HashMap();
        set = new HashSet();
    }
    
    //O(nw) time and space where n is the number of words in dictionary and w is the max length of a word in the dictionary
    public void buildDict(String[] dict) {
        for(String d:dict){
            set.add(d);
            for(String n:neighbors(d)){
                map.put(n,map.getOrDefault(n,0)+1);
            }
        }
    }
    
    public List<String> neighbors(String s){
        List<String> list = new ArrayList();
        char[] ch = s.toCharArray();
        for(int i=0;i<s.length();i++){
            char c = ch[i];
            ch[i] = '*';
            String key = String.valueOf(ch);
            list.add(key);
            ch[i] = c;
        }
        return list;
    }
    
    //O(w) time and O(1) space where w is the length of the word
    public boolean search(String word) {
        for(String w:neighbors(word)){
            int val = map.getOrDefault(w,0);
            if(val>1 || (val==1)&&(!set.contains(word))) return true;
        }
        return false;
    }
}
