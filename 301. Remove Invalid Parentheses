//O(n*2^n-1) time and O(n) space
class Solution {
    public List<String> removeInvalidParentheses(String s) {
        List<String> result = new ArrayList();
        Queue<String> queue = new LinkedList();
        Set<String> visited = new HashSet();
        queue.offer(s);
        visited.add(s);
        boolean done = false;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                String key = queue.poll();
                if(isValid(key)) {
                    result.add(key);
                    done = true;
                }
                else {
                    for(int i=0;i<key.length();i++) {
                        char c = key.charAt(i);
                        if(c!=')' && c!='(') continue;
                        String newKey = key.substring(0,i)+key.substring(i+1);
                        if(!visited.contains(newKey)) {
                            queue.offer(newKey);
                            visited.add(newKey);
                        }
                    }
                }
            }
            if(done) break;
        }
        if(result.size()==0)
            result.add("");
        return result;
    }
    
    public boolean isValid(String s) {
        if(s==null || s.length()==0) return true;
        int balance = 0;
        for(char c:s.toCharArray()) {
            if(c=='(') balance++;
            else if(c==')') {
                balance--;
                if(balance<0) return false;
            }
        }
        return (balance==0);
    }
}
